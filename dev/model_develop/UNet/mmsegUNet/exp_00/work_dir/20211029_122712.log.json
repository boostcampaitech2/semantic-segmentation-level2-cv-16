{"env_info": "sys.platform: linux\nPython: 3.8.5 (default, Sep  4 2020, 07:30:14) [GCC 7.3.0]\nCUDA available: True\nGPU 0: Tesla V100-SXM2-32GB\nCUDA_HOME: None\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.3-Product Build 20210617 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.2\nOpenCV: 4.5.4-dev\nMMCV: 1.3.16\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMSegmentation: 0.18.0+b789c8c", "seed": null, "exp_name": "default_config.py", "mmseg_version": "0.18.0+b789c8c", "config": "pretrained_link = 'https://download.openmmlab.com/mmsegmentation/v0.5/unet/pspnet_unet_s5-d16_128x128_40k_stare/pspnet_unet_s5-d16_128x128_40k_stare_20201227_181818-3c2923c4.pth'\ndataset_type = 'CustomDataset'\ndata_root = '/opt/ml/segmentation/input/data/mmseg/'\nimg_scale = (512, 512)\ncrop_size = (128, 128)\nclasses = [\n    'Background', 'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n    'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n]\npalette = [[0, 0, 0], [192, 0, 128], [0, 128, 192], [0, 128, 64], [128, 0, 0],\n           [64, 0, 128], [64, 0, 192], [192, 128, 64], [192, 192, 128],\n           [64, 64, 128], [128, 0, 192]]\nnorm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained=\n    'https://download.openmmlab.com/mmsegmentation/v0.5/unet/pspnet_unet_s5-d16_128x128_40k_stare/pspnet_unet_s5-d16_128x128_40k_stare_20201227_181818-3c2923c4.pth',\n    backbone=dict(\n        type='UNet',\n        in_channels=3,\n        base_channels=64,\n        num_stages=5,\n        strides=(1, 1, 1, 1, 1),\n        enc_num_convs=(2, 2, 2, 2, 2),\n        dec_num_convs=(2, 2, 2, 2),\n        downsamples=(True, True, True, True),\n        enc_dilations=(1, 1, 1, 1, 1),\n        dec_dilations=(1, 1, 1, 1),\n        with_cp=False,\n        conv_cfg=None,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        act_cfg=dict(type='ReLU'),\n        upsample_cfg=dict(type='InterpConv'),\n        norm_eval=False,\n        pretrained=\n        'https://download.openmmlab.com/mmsegmentation/v0.5/unet/pspnet_unet_s5-d16_128x128_40k_stare/pspnet_unet_s5-d16_128x128_40k_stare_20201227_181818-3c2923c4.pth'\n    ),\n    decode_head=dict(\n        type='PSPHead',\n        in_channels=64,\n        in_index=4,\n        channels=16,\n        pool_scales=(1, 2, 3, 6),\n        dropout_ratio=0.1,\n        num_classes=2,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    auxiliary_head=dict(\n        type='FCNHead',\n        in_channels=128,\n        in_index=3,\n        channels=64,\n        num_convs=1,\n        concat_input=False,\n        dropout_ratio=0.1,\n        num_classes=2,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),\n    train_cfg=dict(),\n    test_cfg=dict(mode='slide', crop_size=(128, 128), stride=(85, 85)))\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(512, 512), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(128, 128), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(128, 128), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(512, 512),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=4,\n    train=dict(\n        type='RepeatDataset',\n        times=40000,\n        dataset=dict(\n            classes=[\n                'Background', 'General trash', 'Paper', 'Paper pack', 'Metal',\n                'Glass', 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                'Clothing'\n            ],\n            palette=[[0, 0, 0], [192, 0, 128], [0, 128, 192], [0, 128, 64],\n                     [128, 0, 0], [64, 0, 128], [64, 0, 192], [192, 128, 64],\n                     [192, 192, 128], [64, 64, 128], [128, 0, 192]],\n            type='CustomDataset',\n            reduce_zero_label=False,\n            img_dir='/opt/ml/segmentation/input/data/mmseg/images/training',\n            ann_dir=\n            '/opt/ml/segmentation/input/data/mmseg/annotations/training',\n            pipeline=[\n                dict(type='LoadImageFromFile'),\n                dict(type='LoadAnnotations'),\n                dict(\n                    type='Resize',\n                    img_scale=(512, 512),\n                    ratio_range=(0.5, 2.0)),\n                dict(\n                    type='RandomCrop',\n                    crop_size=(128, 128),\n                    cat_max_ratio=0.75),\n                dict(type='RandomFlip', prob=0.5),\n                dict(type='PhotoMetricDistortion'),\n                dict(\n                    type='Normalize',\n                    mean=[123.675, 116.28, 103.53],\n                    std=[58.395, 57.12, 57.375],\n                    to_rgb=True),\n                dict(type='Pad', size=(128, 128), pad_val=0, seg_pad_val=255),\n                dict(type='DefaultFormatBundle'),\n                dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n            ])),\n    val=dict(\n        classes=[\n            'Background', 'General trash', 'Paper', 'Paper pack', 'Metal',\n            'Glass', 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n            'Clothing'\n        ],\n        palette=[[0, 0, 0], [192, 0, 128], [0, 128, 192], [0, 128, 64],\n                 [128, 0, 0], [64, 0, 128], [64, 0, 192], [192, 128, 64],\n                 [192, 192, 128], [64, 64, 128], [128, 0, 192]],\n        type='CustomDataset',\n        reduce_zero_label=False,\n        img_dir='/opt/ml/segmentation/input/data/mmseg/images/validation',\n        ann_dir='/opt/ml/segmentation/input/data/mmseg/annotations/validation',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(512, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        classes=[\n            'Background', 'General trash', 'Paper', 'Paper pack', 'Metal',\n            'Glass', 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n            'Clothing'\n        ],\n        palette=[[0, 0, 0], [192, 0, 128], [0, 128, 192], [0, 128, 64],\n                 [128, 0, 0], [64, 0, 128], [64, 0, 192], [192, 128, 64],\n                 [192, 192, 128], [64, 64, 128], [128, 0, 192]],\n        type='CustomDataset',\n        reduce_zero_label=False,\n        img_dir='/opt/ml/segmentation/input/data/mmseg/images/test',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(512, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50,\n    hooks=[\n        dict(type='TextLoggerHook', by_epoch=False),\n        dict(\n            type='WandbLoggerHook',\n            init_kwargs=dict(\n                project='segmentation',\n                name='tmp-pspnet_unet',\n                entity='passion-ate'))\n    ])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'https://download.openmmlab.com/mmsegmentation/v0.5/unet/pspnet_unet_s5-d16_128x128_40k_stare/pspnet_unet_s5-d16_128x128_40k_stare_20201227_181818-3c2923c4.pth'\nresume_from = None\nworkflow = [('train', 1), ('val', 1)]\ncudnn_benchmark = True\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict()\nlr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)\nrunner = dict(type='EpochBasedRunner', max_epochs=50)\ncheckpoint_config = dict(max_keep_ckpts=2, by_epoch=False, interval=100)\nevaluation = dict(interval=1, metric='mDice', pre_eval=True)\nwork_dir = './work_dir/'\ngpu_ids = range(0, 1)\nseed = None\n", "CLASSES": ["Background", "General trash", "Paper", "Paper pack", "Metal", "Glass", "Plastic", "Styrofoam", "Plastic bag", "Battery", "Clothing"], "PALETTE": [[0, 0, 0], [192, 0, 128], [0, 128, 192], [0, 128, 64], [128, 0, 0], [64, 0, 128], [64, 0, 192], [192, 128, 64], [192, 192, 128], [64, 64, 128], [128, 0, 192]]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.01, "memory": 4897, "data_time": 0.2938, "decode.loss_ce": 0.27212, "decode.acc_seg": 47.50888, "aux.loss_ce": 0.08156, "aux.acc_seg": 47.58554, "loss": 0.35367, "time": 0.37211}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.01, "memory": 4897, "data_time": 0.00091, "decode.loss_ce": 0.25063, "decode.acc_seg": 48.16205, "aux.loss_ce": 0.07695, "aux.acc_seg": 48.39236, "loss": 0.32758, "time": 0.06277}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.01, "memory": 4897, "data_time": 0.00044, "decode.loss_ce": 0.193, "decode.acc_seg": 46.03607, "aux.loss_ce": 0.05798, "aux.acc_seg": 46.09116, "loss": 0.25098, "time": 0.04803}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.01, "memory": 4897, "data_time": 0.00084, "decode.loss_ce": 0.2071, "decode.acc_seg": 47.8139, "aux.loss_ce": 0.06204, "aux.acc_seg": 47.77313, "loss": 0.26914, "time": 0.08003}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.01, "memory": 4897, "data_time": 0.00044, "decode.loss_ce": 0.22957, "decode.acc_seg": 48.17117, "aux.loss_ce": 0.06524, "aux.acc_seg": 48.31271, "loss": 0.29481, "time": 0.04792}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.01, "memory": 4897, "data_time": 0.00081, "decode.loss_ce": 0.26594, "decode.acc_seg": 48.04623, "aux.loss_ce": 0.0858, "aux.acc_seg": 48.37967, "loss": 0.35174, "time": 0.10304}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.01, "memory": 4897, "data_time": 0.00045, "decode.loss_ce": 0.21681, "decode.acc_seg": 48.34763, "aux.loss_ce": 0.06286, "aux.acc_seg": 48.5524, "loss": 0.27967, "time": 0.0485}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.01, "memory": 4897, "data_time": 0.00083, "decode.loss_ce": 0.19592, "decode.acc_seg": 48.23227, "aux.loss_ce": 0.05351, "aux.acc_seg": 48.3707, "loss": 0.24942, "time": 0.08011}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.01, "memory": 4897, "data_time": 0.00052, "decode.loss_ce": 0.221, "decode.acc_seg": 46.76117, "aux.loss_ce": 0.06646, "aux.acc_seg": 46.73322, "loss": 0.28746, "time": 0.04785}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.01, "memory": 4897, "data_time": 0.00084, "decode.loss_ce": 0.23596, "decode.acc_seg": 44.58749, "aux.loss_ce": 0.06542, "aux.acc_seg": 44.51068, "loss": 0.30138, "time": 0.08038}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.01, "memory": 4897, "data_time": 0.00054, "decode.loss_ce": 0.24459, "decode.acc_seg": 48.27679, "aux.loss_ce": 0.07446, "aux.acc_seg": 48.10645, "loss": 0.31904, "time": 0.04785}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.01, "memory": 4897, "data_time": 0.00086, "decode.loss_ce": 0.2077, "decode.acc_seg": 47.72275, "aux.loss_ce": 0.06208, "aux.acc_seg": 47.74905, "loss": 0.26979, "time": 0.08025}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.01, "memory": 4897, "data_time": 0.00049, "decode.loss_ce": 0.22221, "decode.acc_seg": 47.19989, "aux.loss_ce": 0.06172, "aux.acc_seg": 47.00812, "loss": 0.28393, "time": 0.04776}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.01, "memory": 4897, "data_time": 0.00084, "decode.loss_ce": 0.20427, "decode.acc_seg": 47.18887, "aux.loss_ce": 0.04845, "aux.acc_seg": 47.28076, "loss": 0.25272, "time": 0.07999}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.01, "memory": 4897, "data_time": 0.00044, "decode.loss_ce": 0.26784, "decode.acc_seg": 44.46042, "aux.loss_ce": 0.07974, "aux.acc_seg": 44.52466, "loss": 0.34757, "time": 0.04795}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.01, "memory": 4897, "data_time": 0.00086, "decode.loss_ce": 0.21729, "decode.acc_seg": 44.63455, "aux.loss_ce": 0.06757, "aux.acc_seg": 44.76575, "loss": 0.28486, "time": 0.07991}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.01, "memory": 4897, "data_time": 0.00046, "decode.loss_ce": 0.26452, "decode.acc_seg": 46.29611, "aux.loss_ce": 0.0899, "aux.acc_seg": 46.20349, "loss": 0.35442, "time": 0.04777}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.01, "memory": 4897, "data_time": 0.00087, "decode.loss_ce": 0.18538, "decode.acc_seg": 47.60107, "aux.loss_ce": 0.05056, "aux.acc_seg": 47.55539, "loss": 0.23594, "time": 0.07994}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.01, "memory": 4897, "data_time": 0.00045, "decode.loss_ce": 0.23593, "decode.acc_seg": 50.33298, "aux.loss_ce": 0.07791, "aux.acc_seg": 50.07254, "loss": 0.31384, "time": 0.04781}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.01, "memory": 4897, "data_time": 0.00085, "decode.loss_ce": 0.19942, "decode.acc_seg": 53.92236, "aux.loss_ce": 0.06012, "aux.acc_seg": 53.78778, "loss": 0.25954, "time": 0.08042}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.01, "memory": 4897, "data_time": 0.00052, "decode.loss_ce": 0.20621, "decode.acc_seg": 46.90875, "aux.loss_ce": 0.05932, "aux.acc_seg": 46.85864, "loss": 0.26553, "time": 0.04764}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.01, "memory": 4897, "data_time": 0.00084, "decode.loss_ce": 0.19547, "decode.acc_seg": 49.85132, "aux.loss_ce": 0.05648, "aux.acc_seg": 49.89941, "loss": 0.25195, "time": 0.07995}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.01, "memory": 4897, "data_time": 0.00046, "decode.loss_ce": 0.20028, "decode.acc_seg": 46.44479, "aux.loss_ce": 0.06307, "aux.acc_seg": 46.47729, "loss": 0.26335, "time": 0.04769}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.01, "memory": 4897, "data_time": 0.00085, "decode.loss_ce": 0.20001, "decode.acc_seg": 46.42258, "aux.loss_ce": 0.06376, "aux.acc_seg": 46.48071, "loss": 0.26377, "time": 0.07965}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 0.01, "memory": 4897, "data_time": 0.0005, "decode.loss_ce": 0.2268, "decode.acc_seg": 48.64047, "aux.loss_ce": 0.06167, "aux.acc_seg": 48.8548, "loss": 0.28847, "time": 0.04785}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.01, "memory": 4897, "data_time": 0.00088, "decode.loss_ce": 0.20571, "decode.acc_seg": 47.59433, "aux.loss_ce": 0.0613, "aux.acc_seg": 47.49988, "loss": 0.26701, "time": 0.08016}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 0.01, "memory": 4897, "data_time": 0.0005, "decode.loss_ce": 0.1986, "decode.acc_seg": 48.4404, "aux.loss_ce": 0.05352, "aux.acc_seg": 48.05875, "loss": 0.25212, "time": 0.04794}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 0.01, "memory": 4897, "data_time": 0.00088, "decode.loss_ce": 0.16999, "decode.acc_seg": 45.16223, "aux.loss_ce": 0.05017, "aux.acc_seg": 45.18594, "loss": 0.22015, "time": 0.08025}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 0.01, "memory": 4897, "data_time": 0.00045, "decode.loss_ce": 0.2409, "decode.acc_seg": 48.31384, "aux.loss_ce": 0.07266, "aux.acc_seg": 48.47427, "loss": 0.31357, "time": 0.04787}
{"mode": "train", "epoch": 1, "iter": 1500, "lr": 0.01, "memory": 4897, "data_time": 0.00083, "decode.loss_ce": 0.20134, "decode.acc_seg": 46.73355, "aux.loss_ce": 0.04845, "aux.acc_seg": 46.72922, "loss": 0.24979, "time": 0.08014}
{"mode": "train", "epoch": 1, "iter": 1550, "lr": 0.01, "memory": 4897, "data_time": 0.00046, "decode.loss_ce": 0.2388, "decode.acc_seg": 46.91055, "aux.loss_ce": 0.06435, "aux.acc_seg": 46.78278, "loss": 0.30315, "time": 0.0479}
{"mode": "train", "epoch": 1, "iter": 1600, "lr": 0.01, "memory": 4897, "data_time": 0.00085, "decode.loss_ce": 0.2586, "decode.acc_seg": 47.48022, "aux.loss_ce": 0.07981, "aux.acc_seg": 46.98724, "loss": 0.33841, "time": 0.08016}
{"mode": "train", "epoch": 1, "iter": 1650, "lr": 0.01, "memory": 4897, "data_time": 0.00046, "decode.loss_ce": 0.23455, "decode.acc_seg": 47.76242, "aux.loss_ce": 0.07392, "aux.acc_seg": 47.79648, "loss": 0.30847, "time": 0.04754}
{"mode": "train", "epoch": 1, "iter": 1700, "lr": 0.01, "memory": 4897, "data_time": 0.00085, "decode.loss_ce": 0.21302, "decode.acc_seg": 44.93225, "aux.loss_ce": 0.06538, "aux.acc_seg": 45.02356, "loss": 0.2784, "time": 0.08063}
{"mode": "train", "epoch": 1, "iter": 1750, "lr": 0.01, "memory": 4897, "data_time": 0.00043, "decode.loss_ce": 0.19602, "decode.acc_seg": 50.17703, "aux.loss_ce": 0.04441, "aux.acc_seg": 50.16498, "loss": 0.24043, "time": 0.04764}
{"mode": "train", "epoch": 1, "iter": 1800, "lr": 0.01, "memory": 4897, "data_time": 0.00084, "decode.loss_ce": 0.23834, "decode.acc_seg": 49.10806, "aux.loss_ce": 0.08478, "aux.acc_seg": 49.17224, "loss": 0.32311, "time": 0.07977}
{"mode": "train", "epoch": 1, "iter": 1850, "lr": 0.01, "memory": 4897, "data_time": 0.00046, "decode.loss_ce": 0.22684, "decode.acc_seg": 45.5766, "aux.loss_ce": 0.07629, "aux.acc_seg": 45.52448, "loss": 0.30313, "time": 0.04769}
{"mode": "train", "epoch": 1, "iter": 1900, "lr": 0.01, "memory": 4897, "data_time": 0.00082, "decode.loss_ce": 0.21067, "decode.acc_seg": 49.35028, "aux.loss_ce": 0.06635, "aux.acc_seg": 49.55811, "loss": 0.27702, "time": 0.08018}
{"mode": "train", "epoch": 1, "iter": 1950, "lr": 0.01, "memory": 4897, "data_time": 0.00053, "decode.loss_ce": 0.25851, "decode.acc_seg": 46.89709, "aux.loss_ce": 0.08375, "aux.acc_seg": 46.73566, "loss": 0.34226, "time": 0.04787}
{"mode": "train", "epoch": 1, "iter": 2000, "lr": 0.01, "memory": 4897, "data_time": 0.00086, "decode.loss_ce": 0.23895, "decode.acc_seg": 46.92981, "aux.loss_ce": 0.07557, "aux.acc_seg": 46.9942, "loss": 0.31452, "time": 0.0802}
{"mode": "train", "epoch": 1, "iter": 2050, "lr": 0.01, "memory": 4897, "data_time": 0.00047, "decode.loss_ce": 0.2194, "decode.acc_seg": 50.72778, "aux.loss_ce": 0.0694, "aux.acc_seg": 50.80243, "loss": 0.2888, "time": 0.04767}
{"mode": "train", "epoch": 1, "iter": 2100, "lr": 0.01, "memory": 4897, "data_time": 0.00084, "decode.loss_ce": 0.23761, "decode.acc_seg": 49.35712, "aux.loss_ce": 0.07416, "aux.acc_seg": 49.00256, "loss": 0.31178, "time": 0.08024}
{"mode": "train", "epoch": 1, "iter": 2150, "lr": 0.01, "memory": 4897, "data_time": 0.00056, "decode.loss_ce": 0.21763, "decode.acc_seg": 48.11133, "aux.loss_ce": 0.05989, "aux.acc_seg": 48.20169, "loss": 0.27752, "time": 0.04802}
{"mode": "train", "epoch": 1, "iter": 2200, "lr": 0.01, "memory": 4897, "data_time": 0.00082, "decode.loss_ce": 0.24167, "decode.acc_seg": 46.89032, "aux.loss_ce": 0.08153, "aux.acc_seg": 46.79785, "loss": 0.32319, "time": 0.08005}
{"mode": "train", "epoch": 1, "iter": 2250, "lr": 0.01, "memory": 4897, "data_time": 0.00046, "decode.loss_ce": 0.24194, "decode.acc_seg": 47.37524, "aux.loss_ce": 0.07377, "aux.acc_seg": 47.24335, "loss": 0.31571, "time": 0.04785}
{"mode": "train", "epoch": 1, "iter": 2300, "lr": 0.01, "memory": 4897, "data_time": 0.00083, "decode.loss_ce": 0.21747, "decode.acc_seg": 46.18365, "aux.loss_ce": 0.07189, "aux.acc_seg": 46.10013, "loss": 0.28936, "time": 0.08023}
{"mode": "train", "epoch": 1, "iter": 2350, "lr": 0.01, "memory": 4897, "data_time": 0.00048, "decode.loss_ce": 0.24189, "decode.acc_seg": 48.13452, "aux.loss_ce": 0.07669, "aux.acc_seg": 47.98453, "loss": 0.31858, "time": 0.04765}
{"mode": "train", "epoch": 1, "iter": 2400, "lr": 0.01, "memory": 4897, "data_time": 0.00086, "decode.loss_ce": 0.20478, "decode.acc_seg": 47.23337, "aux.loss_ce": 0.05303, "aux.acc_seg": 47.12161, "loss": 0.25781, "time": 0.08059}
{"mode": "train", "epoch": 1, "iter": 2450, "lr": 0.01, "memory": 4897, "data_time": 0.0005, "decode.loss_ce": 0.21075, "decode.acc_seg": 46.68741, "aux.loss_ce": 0.05973, "aux.acc_seg": 46.64005, "loss": 0.27048, "time": 0.04785}
{"mode": "train", "epoch": 1, "iter": 2500, "lr": 0.01, "memory": 4897, "data_time": 0.00088, "decode.loss_ce": 0.17834, "decode.acc_seg": 48.38855, "aux.loss_ce": 0.04917, "aux.acc_seg": 48.3866, "loss": 0.22751, "time": 0.07884}
{"mode": "train", "epoch": 1, "iter": 2550, "lr": 0.01, "memory": 4897, "data_time": 0.0005, "decode.loss_ce": 0.19376, "decode.acc_seg": 49.84988, "aux.loss_ce": 0.06019, "aux.acc_seg": 49.60345, "loss": 0.25395, "time": 0.04777}
{"mode": "train", "epoch": 1, "iter": 2600, "lr": 0.01, "memory": 4897, "data_time": 0.00091, "decode.loss_ce": 0.23196, "decode.acc_seg": 49.07166, "aux.loss_ce": 0.06811, "aux.acc_seg": 48.67844, "loss": 0.30007, "time": 0.08091}
{"mode": "train", "epoch": 1, "iter": 2650, "lr": 0.01, "memory": 4897, "data_time": 0.00046, "decode.loss_ce": 0.19514, "decode.acc_seg": 47.4964, "aux.loss_ce": 0.05686, "aux.acc_seg": 47.60599, "loss": 0.252, "time": 0.04779}
{"mode": "train", "epoch": 1, "iter": 2700, "lr": 0.01, "memory": 4897, "data_time": 0.00087, "decode.loss_ce": 0.27854, "decode.acc_seg": 45.27682, "aux.loss_ce": 0.08778, "aux.acc_seg": 45.70667, "loss": 0.36633, "time": 0.08021}
{"mode": "train", "epoch": 1, "iter": 2750, "lr": 0.01, "memory": 4897, "data_time": 0.00052, "decode.loss_ce": 0.19504, "decode.acc_seg": 49.20432, "aux.loss_ce": 0.06428, "aux.acc_seg": 49.20435, "loss": 0.25932, "time": 0.04791}
{"mode": "train", "epoch": 1, "iter": 2800, "lr": 0.01, "memory": 4897, "data_time": 0.00087, "decode.loss_ce": 0.23932, "decode.acc_seg": 47.78381, "aux.loss_ce": 0.07398, "aux.acc_seg": 47.81131, "loss": 0.3133, "time": 0.08021}
{"mode": "train", "epoch": 1, "iter": 2850, "lr": 0.01, "memory": 4897, "data_time": 0.00047, "decode.loss_ce": 0.23367, "decode.acc_seg": 47.29037, "aux.loss_ce": 0.07038, "aux.acc_seg": 47.30994, "loss": 0.30405, "time": 0.04768}
{"mode": "train", "epoch": 1, "iter": 2900, "lr": 0.01, "memory": 4897, "data_time": 0.00092, "decode.loss_ce": 0.21222, "decode.acc_seg": 50.64261, "aux.loss_ce": 0.06677, "aux.acc_seg": 50.71124, "loss": 0.27899, "time": 0.08021}
{"mode": "train", "epoch": 1, "iter": 2950, "lr": 0.01, "memory": 4897, "data_time": 0.00047, "decode.loss_ce": 0.2896, "decode.acc_seg": 44.90152, "aux.loss_ce": 0.09739, "aux.acc_seg": 44.95511, "loss": 0.38699, "time": 0.04768}
{"mode": "train", "epoch": 1, "iter": 3000, "lr": 0.01, "memory": 4897, "data_time": 0.00087, "decode.loss_ce": 0.2134, "decode.acc_seg": 49.32449, "aux.loss_ce": 0.06986, "aux.acc_seg": 49.04785, "loss": 0.28326, "time": 0.07993}
{"mode": "train", "epoch": 1, "iter": 3050, "lr": 0.01, "memory": 4897, "data_time": 0.00047, "decode.loss_ce": 0.22522, "decode.acc_seg": 49.07492, "aux.loss_ce": 0.07074, "aux.acc_seg": 49.1254, "loss": 0.29595, "time": 0.04805}
{"mode": "train", "epoch": 1, "iter": 3100, "lr": 0.01, "memory": 4897, "data_time": 0.00084, "decode.loss_ce": 0.21003, "decode.acc_seg": 46.95987, "aux.loss_ce": 0.06459, "aux.acc_seg": 46.87476, "loss": 0.27462, "time": 0.07988}
{"mode": "train", "epoch": 1, "iter": 3150, "lr": 0.01, "memory": 4897, "data_time": 0.00048, "decode.loss_ce": 0.23738, "decode.acc_seg": 46.94681, "aux.loss_ce": 0.06885, "aux.acc_seg": 46.97791, "loss": 0.30624, "time": 0.04779}
{"mode": "train", "epoch": 1, "iter": 3200, "lr": 0.01, "memory": 4897, "data_time": 0.00088, "decode.loss_ce": 0.26846, "decode.acc_seg": 45.5267, "aux.loss_ce": 0.08464, "aux.acc_seg": 45.75369, "loss": 0.3531, "time": 0.08013}
{"mode": "train", "epoch": 1, "iter": 3250, "lr": 0.01, "memory": 4897, "data_time": 0.00047, "decode.loss_ce": 0.27159, "decode.acc_seg": 48.06461, "aux.loss_ce": 0.08313, "aux.acc_seg": 48.00812, "loss": 0.35471, "time": 0.04783}
{"mode": "train", "epoch": 1, "iter": 3300, "lr": 0.01, "memory": 4897, "data_time": 0.00088, "decode.loss_ce": 0.22758, "decode.acc_seg": 47.55411, "aux.loss_ce": 0.06191, "aux.acc_seg": 47.59265, "loss": 0.28949, "time": 0.08019}
{"mode": "train", "epoch": 1, "iter": 3350, "lr": 0.01, "memory": 4897, "data_time": 0.00044, "decode.loss_ce": 0.22603, "decode.acc_seg": 47.55792, "aux.loss_ce": 0.07077, "aux.acc_seg": 47.36496, "loss": 0.2968, "time": 0.04774}
{"mode": "train", "epoch": 1, "iter": 3400, "lr": 0.01, "memory": 4897, "data_time": 0.00084, "decode.loss_ce": 0.19236, "decode.acc_seg": 46.33795, "aux.loss_ce": 0.06345, "aux.acc_seg": 46.33795, "loss": 0.25581, "time": 0.07986}
{"mode": "train", "epoch": 1, "iter": 3450, "lr": 0.01, "memory": 4897, "data_time": 0.00049, "decode.loss_ce": 0.17384, "decode.acc_seg": 46.43262, "aux.loss_ce": 0.04859, "aux.acc_seg": 46.43887, "loss": 0.22243, "time": 0.04797}
{"mode": "train", "epoch": 1, "iter": 3500, "lr": 0.01, "memory": 4897, "data_time": 0.00085, "decode.loss_ce": 0.20016, "decode.acc_seg": 48.04214, "aux.loss_ce": 0.05543, "aux.acc_seg": 48.03799, "loss": 0.25558, "time": 0.07984}
{"mode": "train", "epoch": 1, "iter": 3550, "lr": 0.01, "memory": 4897, "data_time": 0.00049, "decode.loss_ce": 0.25907, "decode.acc_seg": 45.0405, "aux.loss_ce": 0.08375, "aux.acc_seg": 45.1228, "loss": 0.34282, "time": 0.0476}
{"mode": "train", "epoch": 1, "iter": 3600, "lr": 0.01, "memory": 4897, "data_time": 0.00085, "decode.loss_ce": 0.18396, "decode.acc_seg": 48.63037, "aux.loss_ce": 0.04472, "aux.acc_seg": 48.63037, "loss": 0.22868, "time": 0.08023}
{"mode": "train", "epoch": 1, "iter": 3650, "lr": 0.01, "memory": 4897, "data_time": 0.00048, "decode.loss_ce": 0.2196, "decode.acc_seg": 48.69806, "aux.loss_ce": 0.06207, "aux.acc_seg": 48.71301, "loss": 0.28167, "time": 0.04806}
{"mode": "train", "epoch": 1, "iter": 3700, "lr": 0.01, "memory": 4897, "data_time": 0.00087, "decode.loss_ce": 0.18899, "decode.acc_seg": 45.73944, "aux.loss_ce": 0.05211, "aux.acc_seg": 45.73944, "loss": 0.2411, "time": 0.07914}
