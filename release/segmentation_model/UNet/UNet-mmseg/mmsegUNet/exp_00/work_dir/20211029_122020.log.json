{"env_info": "sys.platform: linux\nPython: 3.8.5 (default, Sep  4 2020, 07:30:14) [GCC 7.3.0]\nCUDA available: True\nGPU 0: Tesla V100-SXM2-32GB\nCUDA_HOME: None\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.3-Product Build 20210617 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.2\nOpenCV: 4.5.4-dev\nMMCV: 1.3.16\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMSegmentation: 0.18.0+b789c8c", "seed": null, "exp_name": "default_config.py", "mmseg_version": "0.18.0+b789c8c", "config": "pretrained_link = 'https://download.openmmlab.com/mmsegmentation/v0.5/unet/pspnet_unet_s5-d16_128x128_40k_stare/pspnet_unet_s5-d16_128x128_40k_stare_20201227_181818-3c2923c4.pth'\ndataset_type = 'CustomDataset'\ndata_root = '/opt/ml/segmentation/input/data/mmseg/'\nimg_scale = (512, 512)\ncrop_size = (128, 128)\nclasses = [\n    'Background', 'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n    'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n]\npalette = [[0, 0, 0], [192, 0, 128], [0, 128, 192], [0, 128, 64], [128, 0, 0],\n           [64, 0, 128], [64, 0, 192], [192, 128, 64], [192, 192, 128],\n           [64, 64, 128], [128, 0, 192]]\nnorm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained=\n    'https://download.openmmlab.com/mmsegmentation/v0.5/unet/pspnet_unet_s5-d16_128x128_40k_stare/pspnet_unet_s5-d16_128x128_40k_stare_20201227_181818-3c2923c4.pth',\n    backbone=dict(\n        type='UNet',\n        in_channels=3,\n        base_channels=64,\n        num_stages=5,\n        strides=(1, 1, 1, 1, 1),\n        enc_num_convs=(2, 2, 2, 2, 2),\n        dec_num_convs=(2, 2, 2, 2),\n        downsamples=(True, True, True, True),\n        enc_dilations=(1, 1, 1, 1, 1),\n        dec_dilations=(1, 1, 1, 1),\n        with_cp=False,\n        conv_cfg=None,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        act_cfg=dict(type='ReLU'),\n        upsample_cfg=dict(type='InterpConv'),\n        norm_eval=False,\n        pretrained=\n        'https://download.openmmlab.com/mmsegmentation/v0.5/unet/pspnet_unet_s5-d16_128x128_40k_stare/pspnet_unet_s5-d16_128x128_40k_stare_20201227_181818-3c2923c4.pth'\n    ),\n    decode_head=dict(\n        type='PSPHead',\n        in_channels=64,\n        in_index=4,\n        channels=16,\n        pool_scales=(1, 2, 3, 6),\n        dropout_ratio=0.1,\n        num_classes=2,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    auxiliary_head=dict(\n        type='FCNHead',\n        in_channels=128,\n        in_index=3,\n        channels=64,\n        num_convs=1,\n        concat_input=False,\n        dropout_ratio=0.1,\n        num_classes=2,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),\n    train_cfg=dict(),\n    test_cfg=dict(mode='slide', crop_size=(128, 128), stride=(85, 85)))\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(512, 512), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(128, 128), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(128, 128), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(512, 512),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=4,\n    train=dict(\n        type='RepeatDataset',\n        times=40000,\n        dataset=dict(\n            classes=[\n                'Background', 'General trash', 'Paper', 'Paper pack', 'Metal',\n                'Glass', 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                'Clothing'\n            ],\n            palette=[[0, 0, 0], [192, 0, 128], [0, 128, 192], [0, 128, 64],\n                     [128, 0, 0], [64, 0, 128], [64, 0, 192], [192, 128, 64],\n                     [192, 192, 128], [64, 64, 128], [128, 0, 192]],\n            type='CustomDataset',\n            reduce_zero_label=False,\n            img_dir='/opt/ml/segmentation/input/data/mmseg/images/training',\n            ann_dir=\n            '/opt/ml/segmentation/input/data/mmseg/annotations/training',\n            pipeline=[\n                dict(type='LoadImageFromFile'),\n                dict(type='LoadAnnotations'),\n                dict(\n                    type='Resize',\n                    img_scale=(512, 512),\n                    ratio_range=(0.5, 2.0)),\n                dict(\n                    type='RandomCrop',\n                    crop_size=(128, 128),\n                    cat_max_ratio=0.75),\n                dict(type='RandomFlip', prob=0.5),\n                dict(type='PhotoMetricDistortion'),\n                dict(\n                    type='Normalize',\n                    mean=[123.675, 116.28, 103.53],\n                    std=[58.395, 57.12, 57.375],\n                    to_rgb=True),\n                dict(type='Pad', size=(128, 128), pad_val=0, seg_pad_val=255),\n                dict(type='DefaultFormatBundle'),\n                dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n            ])),\n    val=dict(\n        classes=[\n            'Background', 'General trash', 'Paper', 'Paper pack', 'Metal',\n            'Glass', 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n            'Clothing'\n        ],\n        palette=[[0, 0, 0], [192, 0, 128], [0, 128, 192], [0, 128, 64],\n                 [128, 0, 0], [64, 0, 128], [64, 0, 192], [192, 128, 64],\n                 [192, 192, 128], [64, 64, 128], [128, 0, 192]],\n        type='CustomDataset',\n        reduce_zero_label=False,\n        img_dir='/opt/ml/segmentation/input/data/mmseg/images/validation',\n        ann_dir='/opt/ml/segmentation/input/data/mmseg/annotations/validation',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(512, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        classes=[\n            'Background', 'General trash', 'Paper', 'Paper pack', 'Metal',\n            'Glass', 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n            'Clothing'\n        ],\n        palette=[[0, 0, 0], [192, 0, 128], [0, 128, 192], [0, 128, 64],\n                 [128, 0, 0], [64, 0, 128], [64, 0, 192], [192, 128, 64],\n                 [192, 192, 128], [64, 64, 128], [128, 0, 192]],\n        type='CustomDataset',\n        reduce_zero_label=False,\n        img_dir='/opt/ml/segmentation/input/data/mmseg/images/test',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(512, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50,\n    hooks=[\n        dict(type='TextLoggerHook', by_epoch=False),\n        dict(\n            type='WandbLoggerHook',\n            init_kwargs=dict(\n                project='segmentation',\n                name='tmp-pspnet_unet',\n                entity='passion-ate'))\n    ])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'https://download.openmmlab.com/mmsegmentation/v0.5/unet/pspnet_unet_s5-d16_128x128_40k_stare/pspnet_unet_s5-d16_128x128_40k_stare_20201227_181818-3c2923c4.pth'\nresume_from = None\nworkflow = [('train', 1), ('val', 1)]\ncudnn_benchmark = True\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict()\nlr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)\nrunner = dict(type='EpochBasedRunner', max_epochs=50)\ncheckpoint_config = dict(max_keep_ckpts=2, by_epoch=True, interval=1)\nevaluation = dict(interval=1, metric='mDice', pre_eval=True)\nwork_dir = './work_dir/'\ngpu_ids = range(0, 1)\nseed = None\n", "CLASSES": ["Background", "General trash", "Paper", "Paper pack", "Metal", "Glass", "Plastic", "Styrofoam", "Plastic bag", "Battery", "Clothing"], "PALETTE": [[0, 0, 0], [192, 0, 128], [0, 128, 192], [0, 128, 64], [128, 0, 0], [64, 0, 128], [64, 0, 192], [192, 128, 64], [192, 192, 128], [64, 64, 128], [128, 0, 192]]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.01, "memory": 4897, "data_time": 0.30087, "decode.loss_ce": 0.31607, "decode.acc_seg": 45.35873, "aux.loss_ce": 0.09696, "aux.acc_seg": 45.52133, "loss": 0.41303, "time": 0.37873}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.01, "memory": 4897, "data_time": 0.00082, "decode.loss_ce": 0.23747, "decode.acc_seg": 45.84552, "aux.loss_ce": 0.0774, "aux.acc_seg": 46.06018, "loss": 0.31487, "time": 0.04811}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.01, "memory": 4897, "data_time": 0.00085, "decode.loss_ce": 0.21698, "decode.acc_seg": 50.59866, "aux.loss_ce": 0.06226, "aux.acc_seg": 50.59506, "loss": 0.27924, "time": 0.04812}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.01, "memory": 4897, "data_time": 0.00086, "decode.loss_ce": 0.21249, "decode.acc_seg": 45.40643, "aux.loss_ce": 0.05744, "aux.acc_seg": 46.27435, "loss": 0.26994, "time": 0.04832}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.01, "memory": 4897, "data_time": 0.00088, "decode.loss_ce": 0.22369, "decode.acc_seg": 47.90018, "aux.loss_ce": 0.07018, "aux.acc_seg": 47.68164, "loss": 0.29387, "time": 0.04839}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.01, "memory": 4897, "data_time": 0.00091, "decode.loss_ce": 0.2545, "decode.acc_seg": 47.28183, "aux.loss_ce": 0.07657, "aux.acc_seg": 47.37994, "loss": 0.33106, "time": 0.04842}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.01, "memory": 4897, "data_time": 0.00082, "decode.loss_ce": 0.22616, "decode.acc_seg": 47.01743, "aux.loss_ce": 0.06729, "aux.acc_seg": 46.81674, "loss": 0.29345, "time": 0.04841}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.01, "memory": 4897, "data_time": 0.00086, "decode.loss_ce": 0.23317, "decode.acc_seg": 46.22034, "aux.loss_ce": 0.0602, "aux.acc_seg": 46.45502, "loss": 0.29337, "time": 0.04828}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.01, "memory": 4897, "data_time": 0.00082, "decode.loss_ce": 0.20873, "decode.acc_seg": 41.69958, "aux.loss_ce": 0.06179, "aux.acc_seg": 41.64221, "loss": 0.27052, "time": 0.04826}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.01, "memory": 4897, "data_time": 0.00081, "decode.loss_ce": 0.27175, "decode.acc_seg": 46.48206, "aux.loss_ce": 0.08072, "aux.acc_seg": 46.57468, "loss": 0.35247, "time": 0.04843}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.01, "memory": 4897, "data_time": 0.00087, "decode.loss_ce": 0.17758, "decode.acc_seg": 47.05542, "aux.loss_ce": 0.05156, "aux.acc_seg": 46.92667, "loss": 0.22914, "time": 0.04826}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.01, "memory": 4897, "data_time": 0.00089, "decode.loss_ce": 0.193, "decode.acc_seg": 47.72977, "aux.loss_ce": 0.05695, "aux.acc_seg": 47.96667, "loss": 0.24994, "time": 0.04823}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.01, "memory": 4897, "data_time": 0.00086, "decode.loss_ce": 0.23811, "decode.acc_seg": 44.15829, "aux.loss_ce": 0.07355, "aux.acc_seg": 44.27921, "loss": 0.31166, "time": 0.04824}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.01, "memory": 4897, "data_time": 0.00084, "decode.loss_ce": 0.22301, "decode.acc_seg": 46.41736, "aux.loss_ce": 0.06016, "aux.acc_seg": 46.39108, "loss": 0.28317, "time": 0.07025}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.01, "memory": 4897, "data_time": 0.00088, "decode.loss_ce": 0.25636, "decode.acc_seg": 48.40399, "aux.loss_ce": 0.07235, "aux.acc_seg": 48.57336, "loss": 0.32871, "time": 0.04808}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.01, "memory": 4897, "data_time": 0.00086, "decode.loss_ce": 0.1775, "decode.acc_seg": 49.18689, "aux.loss_ce": 0.04827, "aux.acc_seg": 49.04141, "loss": 0.22577, "time": 0.04823}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.01, "memory": 4897, "data_time": 0.00084, "decode.loss_ce": 0.24785, "decode.acc_seg": 49.94894, "aux.loss_ce": 0.08094, "aux.acc_seg": 49.41266, "loss": 0.32879, "time": 0.04817}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.01, "memory": 4897, "data_time": 0.00089, "decode.loss_ce": 0.22839, "decode.acc_seg": 49.88358, "aux.loss_ce": 0.07179, "aux.acc_seg": 49.72409, "loss": 0.30018, "time": 0.04821}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.01, "memory": 4897, "data_time": 0.00088, "decode.loss_ce": 0.24679, "decode.acc_seg": 46.92422, "aux.loss_ce": 0.07344, "aux.acc_seg": 46.35492, "loss": 0.32024, "time": 0.0482}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.01, "memory": 4897, "data_time": 0.00085, "decode.loss_ce": 0.19443, "decode.acc_seg": 48.45511, "aux.loss_ce": 0.06209, "aux.acc_seg": 48.4549, "loss": 0.25652, "time": 0.04813}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.01, "memory": 4897, "data_time": 0.00087, "decode.loss_ce": 0.23701, "decode.acc_seg": 49.02686, "aux.loss_ce": 0.07089, "aux.acc_seg": 48.767, "loss": 0.3079, "time": 0.04808}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.01, "memory": 4897, "data_time": 0.00089, "decode.loss_ce": 0.16196, "decode.acc_seg": 49.12982, "aux.loss_ce": 0.04425, "aux.acc_seg": 48.84625, "loss": 0.20621, "time": 0.04837}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.01, "memory": 4897, "data_time": 0.00095, "decode.loss_ce": 0.26581, "decode.acc_seg": 46.96985, "aux.loss_ce": 0.07753, "aux.acc_seg": 46.9819, "loss": 0.34334, "time": 0.04815}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.01, "memory": 4897, "data_time": 0.00088, "decode.loss_ce": 0.20091, "decode.acc_seg": 48.23041, "aux.loss_ce": 0.054, "aux.acc_seg": 48.20657, "loss": 0.25491, "time": 0.04818}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 0.01, "memory": 4897, "data_time": 0.00087, "decode.loss_ce": 0.27905, "decode.acc_seg": 45.3035, "aux.loss_ce": 0.08567, "aux.acc_seg": 45.28607, "loss": 0.36472, "time": 0.04811}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.01, "memory": 4897, "data_time": 0.00084, "decode.loss_ce": 0.21361, "decode.acc_seg": 47.7926, "aux.loss_ce": 0.06372, "aux.acc_seg": 47.72263, "loss": 0.27733, "time": 0.04791}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 0.01, "memory": 4897, "data_time": 0.00088, "decode.loss_ce": 0.20986, "decode.acc_seg": 46.0004, "aux.loss_ce": 0.06196, "aux.acc_seg": 46.17401, "loss": 0.27182, "time": 0.0485}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 0.01, "memory": 4897, "data_time": 0.00095, "decode.loss_ce": 0.24143, "decode.acc_seg": 45.30307, "aux.loss_ce": 0.07407, "aux.acc_seg": 45.1821, "loss": 0.3155, "time": 0.04882}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 0.01, "memory": 4897, "data_time": 0.00092, "decode.loss_ce": 0.16352, "decode.acc_seg": 48.18417, "aux.loss_ce": 0.04007, "aux.acc_seg": 48.15436, "loss": 0.20359, "time": 0.04837}
{"mode": "train", "epoch": 1, "iter": 1500, "lr": 0.01, "memory": 4897, "data_time": 0.00083, "decode.loss_ce": 0.2246, "decode.acc_seg": 46.97037, "aux.loss_ce": 0.05828, "aux.acc_seg": 46.84482, "loss": 0.28288, "time": 0.04828}
{"mode": "train", "epoch": 1, "iter": 1550, "lr": 0.01, "memory": 4897, "data_time": 0.00089, "decode.loss_ce": 0.20777, "decode.acc_seg": 45.57385, "aux.loss_ce": 0.06061, "aux.acc_seg": 44.8765, "loss": 0.26838, "time": 0.04843}
{"mode": "train", "epoch": 1, "iter": 1600, "lr": 0.01, "memory": 4897, "data_time": 0.00087, "decode.loss_ce": 0.23677, "decode.acc_seg": 47.68051, "aux.loss_ce": 0.06775, "aux.acc_seg": 47.84479, "loss": 0.30452, "time": 0.04842}
{"mode": "train", "epoch": 1, "iter": 1650, "lr": 0.01, "memory": 4897, "data_time": 0.00091, "decode.loss_ce": 0.1895, "decode.acc_seg": 44.99371, "aux.loss_ce": 0.05333, "aux.acc_seg": 45.08521, "loss": 0.24283, "time": 0.04857}
{"mode": "train", "epoch": 1, "iter": 1700, "lr": 0.01, "memory": 4897, "data_time": 0.00088, "decode.loss_ce": 0.22825, "decode.acc_seg": 47.18777, "aux.loss_ce": 0.06658, "aux.acc_seg": 47.28882, "loss": 0.29483, "time": 0.04841}
{"mode": "train", "epoch": 1, "iter": 1750, "lr": 0.01, "memory": 4897, "data_time": 0.00089, "decode.loss_ce": 0.20273, "decode.acc_seg": 47.07324, "aux.loss_ce": 0.06229, "aux.acc_seg": 47.09677, "loss": 0.26502, "time": 0.04835}
{"mode": "train", "epoch": 1, "iter": 1800, "lr": 0.01, "memory": 4897, "data_time": 0.00078, "decode.loss_ce": 0.2293, "decode.acc_seg": 48.50195, "aux.loss_ce": 0.07142, "aux.acc_seg": 48.12991, "loss": 0.30072, "time": 0.04832}
{"mode": "train", "epoch": 1, "iter": 1850, "lr": 0.01, "memory": 4897, "data_time": 0.00083, "decode.loss_ce": 0.20964, "decode.acc_seg": 48.58228, "aux.loss_ce": 0.06771, "aux.acc_seg": 48.08875, "loss": 0.27735, "time": 0.04831}
{"mode": "train", "epoch": 1, "iter": 1900, "lr": 0.01, "memory": 4897, "data_time": 0.00091, "decode.loss_ce": 0.21954, "decode.acc_seg": 46.15594, "aux.loss_ce": 0.06768, "aux.acc_seg": 45.89398, "loss": 0.28722, "time": 0.04813}
{"mode": "train", "epoch": 1, "iter": 1950, "lr": 0.01, "memory": 4897, "data_time": 0.00086, "decode.loss_ce": 0.18871, "decode.acc_seg": 44.47937, "aux.loss_ce": 0.05192, "aux.acc_seg": 44.50781, "loss": 0.24064, "time": 0.04842}
{"mode": "train", "epoch": 1, "iter": 2000, "lr": 0.01, "memory": 4897, "data_time": 0.00084, "decode.loss_ce": 0.22873, "decode.acc_seg": 50.09732, "aux.loss_ce": 0.06768, "aux.acc_seg": 49.79221, "loss": 0.29641, "time": 0.04869}
{"mode": "train", "epoch": 1, "iter": 2050, "lr": 0.01, "memory": 4897, "data_time": 0.00093, "decode.loss_ce": 0.20791, "decode.acc_seg": 49.20874, "aux.loss_ce": 0.05894, "aux.acc_seg": 49.17746, "loss": 0.26685, "time": 0.04827}
{"mode": "train", "epoch": 1, "iter": 2100, "lr": 0.01, "memory": 4897, "data_time": 0.00088, "decode.loss_ce": 0.21624, "decode.acc_seg": 49.79514, "aux.loss_ce": 0.06881, "aux.acc_seg": 49.72278, "loss": 0.28504, "time": 0.04838}
{"mode": "train", "epoch": 1, "iter": 2150, "lr": 0.01, "memory": 4897, "data_time": 0.0008, "decode.loss_ce": 0.24784, "decode.acc_seg": 45.56781, "aux.loss_ce": 0.07989, "aux.acc_seg": 45.36859, "loss": 0.32773, "time": 0.04804}
{"mode": "train", "epoch": 1, "iter": 2200, "lr": 0.01, "memory": 4897, "data_time": 0.00092, "decode.loss_ce": 0.19734, "decode.acc_seg": 48.10699, "aux.loss_ce": 0.05966, "aux.acc_seg": 48.06195, "loss": 0.257, "time": 0.04852}
{"mode": "train", "epoch": 1, "iter": 2250, "lr": 0.01, "memory": 4897, "data_time": 0.00087, "decode.loss_ce": 0.19712, "decode.acc_seg": 47.44815, "aux.loss_ce": 0.05731, "aux.acc_seg": 47.39029, "loss": 0.25444, "time": 0.04828}
{"mode": "train", "epoch": 1, "iter": 2300, "lr": 0.01, "memory": 4897, "data_time": 0.00092, "decode.loss_ce": 0.18655, "decode.acc_seg": 45.81781, "aux.loss_ce": 0.0496, "aux.acc_seg": 45.68042, "loss": 0.23615, "time": 0.0487}
{"mode": "train", "epoch": 1, "iter": 2350, "lr": 0.01, "memory": 4897, "data_time": 0.00077, "decode.loss_ce": 0.24901, "decode.acc_seg": 45.62811, "aux.loss_ce": 0.07747, "aux.acc_seg": 45.41019, "loss": 0.32648, "time": 0.04826}
{"mode": "train", "epoch": 1, "iter": 2400, "lr": 0.01, "memory": 4897, "data_time": 0.00091, "decode.loss_ce": 0.22267, "decode.acc_seg": 46.21426, "aux.loss_ce": 0.07229, "aux.acc_seg": 46.25845, "loss": 0.29496, "time": 0.04829}
{"mode": "train", "epoch": 1, "iter": 2450, "lr": 0.01, "memory": 4897, "data_time": 0.0009, "decode.loss_ce": 0.2109, "decode.acc_seg": 49.42731, "aux.loss_ce": 0.06115, "aux.acc_seg": 49.18228, "loss": 0.27205, "time": 0.04855}
{"mode": "train", "epoch": 1, "iter": 2500, "lr": 0.01, "memory": 4897, "data_time": 0.00091, "decode.loss_ce": 0.22023, "decode.acc_seg": 46.16434, "aux.loss_ce": 0.062, "aux.acc_seg": 46.02844, "loss": 0.28222, "time": 0.04995}
{"mode": "train", "epoch": 1, "iter": 2550, "lr": 0.01, "memory": 4897, "data_time": 0.0009, "decode.loss_ce": 0.22612, "decode.acc_seg": 47.05148, "aux.loss_ce": 0.0668, "aux.acc_seg": 47.04535, "loss": 0.29292, "time": 0.04851}
{"mode": "train", "epoch": 1, "iter": 2600, "lr": 0.01, "memory": 4897, "data_time": 0.00086, "decode.loss_ce": 0.21952, "decode.acc_seg": 48.73196, "aux.loss_ce": 0.06476, "aux.acc_seg": 48.75919, "loss": 0.28428, "time": 0.04838}
{"mode": "train", "epoch": 1, "iter": 2650, "lr": 0.01, "memory": 4897, "data_time": 0.00087, "decode.loss_ce": 0.19169, "decode.acc_seg": 45.78839, "aux.loss_ce": 0.054, "aux.acc_seg": 45.71451, "loss": 0.24569, "time": 0.04867}
{"mode": "train", "epoch": 1, "iter": 2700, "lr": 0.01, "memory": 4897, "data_time": 0.00088, "decode.loss_ce": 0.17921, "decode.acc_seg": 51.00696, "aux.loss_ce": 0.04277, "aux.acc_seg": 50.92245, "loss": 0.22198, "time": 0.04823}
{"mode": "train", "epoch": 1, "iter": 2750, "lr": 0.01, "memory": 4897, "data_time": 0.0009, "decode.loss_ce": 0.2372, "decode.acc_seg": 45.60004, "aux.loss_ce": 0.06202, "aux.acc_seg": 45.26379, "loss": 0.29922, "time": 0.04817}
{"mode": "train", "epoch": 1, "iter": 2800, "lr": 0.01, "memory": 4897, "data_time": 0.00086, "decode.loss_ce": 0.24017, "decode.acc_seg": 50.99084, "aux.loss_ce": 0.07115, "aux.acc_seg": 50.99234, "loss": 0.31132, "time": 0.04853}
{"mode": "train", "epoch": 1, "iter": 2850, "lr": 0.01, "memory": 4897, "data_time": 0.00089, "decode.loss_ce": 0.19025, "decode.acc_seg": 46.79071, "aux.loss_ce": 0.05491, "aux.acc_seg": 46.58585, "loss": 0.24516, "time": 0.04817}
{"mode": "train", "epoch": 1, "iter": 2900, "lr": 0.01, "memory": 4897, "data_time": 0.00092, "decode.loss_ce": 0.21709, "decode.acc_seg": 47.07883, "aux.loss_ce": 0.06589, "aux.acc_seg": 46.95474, "loss": 0.28298, "time": 0.04841}
{"mode": "train", "epoch": 1, "iter": 2950, "lr": 0.01, "memory": 4897, "data_time": 0.00088, "decode.loss_ce": 0.2348, "decode.acc_seg": 50.51639, "aux.loss_ce": 0.07334, "aux.acc_seg": 50.42258, "loss": 0.30814, "time": 0.04905}
{"mode": "train", "epoch": 1, "iter": 3000, "lr": 0.01, "memory": 4897, "data_time": 0.00089, "decode.loss_ce": 0.22556, "decode.acc_seg": 49.44531, "aux.loss_ce": 0.06504, "aux.acc_seg": 49.55542, "loss": 0.2906, "time": 0.04869}
{"mode": "train", "epoch": 1, "iter": 3050, "lr": 0.01, "memory": 4897, "data_time": 0.00086, "decode.loss_ce": 0.19626, "decode.acc_seg": 48.45807, "aux.loss_ce": 0.05677, "aux.acc_seg": 48.37305, "loss": 0.25302, "time": 0.04855}
{"mode": "train", "epoch": 1, "iter": 3100, "lr": 0.01, "memory": 4897, "data_time": 0.00082, "decode.loss_ce": 0.27718, "decode.acc_seg": 48.27689, "aux.loss_ce": 0.08507, "aux.acc_seg": 48.00925, "loss": 0.36225, "time": 0.04838}
{"mode": "train", "epoch": 1, "iter": 3150, "lr": 0.01, "memory": 4897, "data_time": 0.00089, "decode.loss_ce": 0.20501, "decode.acc_seg": 49.13492, "aux.loss_ce": 0.05924, "aux.acc_seg": 48.93729, "loss": 0.26425, "time": 0.04806}
{"mode": "train", "epoch": 1, "iter": 3200, "lr": 0.01, "memory": 4897, "data_time": 0.00088, "decode.loss_ce": 0.20507, "decode.acc_seg": 47.62607, "aux.loss_ce": 0.05661, "aux.acc_seg": 47.57138, "loss": 0.26168, "time": 0.04827}
{"mode": "train", "epoch": 1, "iter": 3250, "lr": 0.01, "memory": 4897, "data_time": 0.00087, "decode.loss_ce": 0.24116, "decode.acc_seg": 46.25195, "aux.loss_ce": 0.07264, "aux.acc_seg": 46.21725, "loss": 0.3138, "time": 0.04904}
{"mode": "train", "epoch": 1, "iter": 3300, "lr": 0.01, "memory": 4897, "data_time": 0.00083, "decode.loss_ce": 0.22333, "decode.acc_seg": 48.39301, "aux.loss_ce": 0.06511, "aux.acc_seg": 48.42441, "loss": 0.28844, "time": 0.04851}
{"mode": "train", "epoch": 1, "iter": 3350, "lr": 0.01, "memory": 4897, "data_time": 0.00094, "decode.loss_ce": 0.21102, "decode.acc_seg": 47.65149, "aux.loss_ce": 0.065, "aux.acc_seg": 47.3866, "loss": 0.27602, "time": 0.0488}
{"mode": "train", "epoch": 1, "iter": 3400, "lr": 0.01, "memory": 4897, "data_time": 0.00075, "decode.loss_ce": 0.24989, "decode.acc_seg": 47.66464, "aux.loss_ce": 0.07729, "aux.acc_seg": 47.49622, "loss": 0.32718, "time": 0.04833}
{"mode": "train", "epoch": 1, "iter": 3450, "lr": 0.01, "memory": 4897, "data_time": 0.00089, "decode.loss_ce": 0.23437, "decode.acc_seg": 50.13458, "aux.loss_ce": 0.07391, "aux.acc_seg": 49.96579, "loss": 0.30828, "time": 0.04869}
{"mode": "train", "epoch": 1, "iter": 3500, "lr": 0.01, "memory": 4897, "data_time": 0.00086, "decode.loss_ce": 0.2011, "decode.acc_seg": 47.87097, "aux.loss_ce": 0.05765, "aux.acc_seg": 47.79544, "loss": 0.25876, "time": 0.04832}
{"mode": "train", "epoch": 1, "iter": 3550, "lr": 0.01, "memory": 4897, "data_time": 0.00097, "decode.loss_ce": 0.18419, "decode.acc_seg": 49.39597, "aux.loss_ce": 0.05423, "aux.acc_seg": 49.19196, "loss": 0.23842, "time": 0.04828}
{"mode": "train", "epoch": 1, "iter": 3600, "lr": 0.01, "memory": 4897, "data_time": 0.00096, "decode.loss_ce": 0.21049, "decode.acc_seg": 47.67181, "aux.loss_ce": 0.06084, "aux.acc_seg": 47.48941, "loss": 0.27133, "time": 0.04846}
{"mode": "train", "epoch": 1, "iter": 3650, "lr": 0.01, "memory": 4897, "data_time": 0.00086, "decode.loss_ce": 0.23435, "decode.acc_seg": 48.53311, "aux.loss_ce": 0.07082, "aux.acc_seg": 48.56006, "loss": 0.30516, "time": 0.04858}
{"mode": "train", "epoch": 1, "iter": 3700, "lr": 0.01, "memory": 4897, "data_time": 0.00082, "decode.loss_ce": 0.20736, "decode.acc_seg": 48.84546, "aux.loss_ce": 0.05733, "aux.acc_seg": 48.94043, "loss": 0.26468, "time": 0.04812}
{"mode": "train", "epoch": 1, "iter": 3750, "lr": 0.01, "memory": 4897, "data_time": 0.0009, "decode.loss_ce": 0.21147, "decode.acc_seg": 47.13431, "aux.loss_ce": 0.0698, "aux.acc_seg": 47.08914, "loss": 0.28127, "time": 0.0485}
{"mode": "train", "epoch": 1, "iter": 3800, "lr": 0.01, "memory": 4897, "data_time": 0.00087, "decode.loss_ce": 0.20221, "decode.acc_seg": 50.90045, "aux.loss_ce": 0.05934, "aux.acc_seg": 50.74872, "loss": 0.26155, "time": 0.04814}
{"mode": "train", "epoch": 1, "iter": 3850, "lr": 0.01, "memory": 4897, "data_time": 0.00086, "decode.loss_ce": 0.20928, "decode.acc_seg": 48.12589, "aux.loss_ce": 0.06262, "aux.acc_seg": 47.91699, "loss": 0.2719, "time": 0.04787}
{"mode": "train", "epoch": 1, "iter": 3900, "lr": 0.01, "memory": 4897, "data_time": 0.00086, "decode.loss_ce": 0.24595, "decode.acc_seg": 47.4472, "aux.loss_ce": 0.07944, "aux.acc_seg": 47.27725, "loss": 0.32539, "time": 0.04786}
{"mode": "train", "epoch": 1, "iter": 3950, "lr": 0.01, "memory": 4897, "data_time": 0.00087, "decode.loss_ce": 0.21651, "decode.acc_seg": 50.29831, "aux.loss_ce": 0.06238, "aux.acc_seg": 50.02707, "loss": 0.2789, "time": 0.04783}
{"mode": "train", "epoch": 1, "iter": 4000, "lr": 0.01, "memory": 4897, "data_time": 0.00086, "decode.loss_ce": 0.19876, "decode.acc_seg": 48.13101, "aux.loss_ce": 0.05358, "aux.acc_seg": 48.11926, "loss": 0.25234, "time": 0.04782}
{"mode": "train", "epoch": 1, "iter": 4050, "lr": 0.01, "memory": 4897, "data_time": 0.00086, "decode.loss_ce": 0.18196, "decode.acc_seg": 46.12811, "aux.loss_ce": 0.05885, "aux.acc_seg": 46.19501, "loss": 0.24081, "time": 0.04821}
{"mode": "train", "epoch": 1, "iter": 4100, "lr": 0.01, "memory": 4897, "data_time": 0.00088, "decode.loss_ce": 0.26107, "decode.acc_seg": 49.25626, "aux.loss_ce": 0.08471, "aux.acc_seg": 49.21216, "loss": 0.34578, "time": 0.04821}
{"mode": "train", "epoch": 1, "iter": 4150, "lr": 0.01, "memory": 4897, "data_time": 0.00093, "decode.loss_ce": 0.21082, "decode.acc_seg": 46.67224, "aux.loss_ce": 0.06877, "aux.acc_seg": 46.5144, "loss": 0.27959, "time": 0.04815}
{"mode": "train", "epoch": 1, "iter": 4200, "lr": 0.01, "memory": 4897, "data_time": 0.00091, "decode.loss_ce": 0.22942, "decode.acc_seg": 46.79013, "aux.loss_ce": 0.06599, "aux.acc_seg": 46.66382, "loss": 0.29541, "time": 0.04835}
{"mode": "train", "epoch": 1, "iter": 4250, "lr": 0.01, "memory": 4897, "data_time": 0.00082, "decode.loss_ce": 0.16368, "decode.acc_seg": 46.1333, "aux.loss_ce": 0.0402, "aux.acc_seg": 46.12326, "loss": 0.20388, "time": 0.0482}
{"mode": "train", "epoch": 1, "iter": 4300, "lr": 0.01, "memory": 4897, "data_time": 0.0009, "decode.loss_ce": 0.1651, "decode.acc_seg": 50.02399, "aux.loss_ce": 0.03943, "aux.acc_seg": 50.02567, "loss": 0.20453, "time": 0.04852}
{"mode": "train", "epoch": 1, "iter": 4350, "lr": 0.01, "memory": 4897, "data_time": 0.00087, "decode.loss_ce": 0.22405, "decode.acc_seg": 45.95575, "aux.loss_ce": 0.07281, "aux.acc_seg": 45.40311, "loss": 0.29686, "time": 0.04885}
{"mode": "train", "epoch": 1, "iter": 4400, "lr": 0.01, "memory": 4897, "data_time": 0.00084, "decode.loss_ce": 0.19142, "decode.acc_seg": 46.21555, "aux.loss_ce": 0.05312, "aux.acc_seg": 46.41397, "loss": 0.24454, "time": 0.04859}
{"mode": "train", "epoch": 1, "iter": 4450, "lr": 0.01, "memory": 4897, "data_time": 0.00088, "decode.loss_ce": 0.25139, "decode.acc_seg": 47.94464, "aux.loss_ce": 0.07738, "aux.acc_seg": 47.8884, "loss": 0.32877, "time": 0.04847}
{"mode": "train", "epoch": 1, "iter": 4500, "lr": 0.01, "memory": 4897, "data_time": 0.00084, "decode.loss_ce": 0.2389, "decode.acc_seg": 47.33035, "aux.loss_ce": 0.07774, "aux.acc_seg": 47.2532, "loss": 0.31664, "time": 0.04851}
{"mode": "train", "epoch": 1, "iter": 4550, "lr": 0.01, "memory": 4897, "data_time": 0.00091, "decode.loss_ce": 0.23623, "decode.acc_seg": 48.40289, "aux.loss_ce": 0.0669, "aux.acc_seg": 48.24939, "loss": 0.30313, "time": 0.04822}
{"mode": "train", "epoch": 1, "iter": 4600, "lr": 0.01, "memory": 4897, "data_time": 0.00085, "decode.loss_ce": 0.23033, "decode.acc_seg": 48.04413, "aux.loss_ce": 0.06769, "aux.acc_seg": 48.03845, "loss": 0.29802, "time": 0.04841}
{"mode": "train", "epoch": 1, "iter": 4650, "lr": 0.01, "memory": 4897, "data_time": 0.00091, "decode.loss_ce": 0.24397, "decode.acc_seg": 45.26065, "aux.loss_ce": 0.07971, "aux.acc_seg": 44.95676, "loss": 0.32368, "time": 0.04849}
{"mode": "train", "epoch": 1, "iter": 4700, "lr": 0.01, "memory": 4897, "data_time": 0.00089, "decode.loss_ce": 0.24024, "decode.acc_seg": 48.52765, "aux.loss_ce": 0.07199, "aux.acc_seg": 48.40402, "loss": 0.31223, "time": 0.04893}
{"mode": "train", "epoch": 1, "iter": 4750, "lr": 0.01, "memory": 4897, "data_time": 0.00096, "decode.loss_ce": 0.21747, "decode.acc_seg": 49.78867, "aux.loss_ce": 0.06111, "aux.acc_seg": 49.79385, "loss": 0.27858, "time": 0.04907}
{"mode": "train", "epoch": 1, "iter": 4800, "lr": 0.01, "memory": 4897, "data_time": 0.00089, "decode.loss_ce": 0.21911, "decode.acc_seg": 48.32108, "aux.loss_ce": 0.06704, "aux.acc_seg": 48.30188, "loss": 0.28615, "time": 0.04851}
{"mode": "train", "epoch": 1, "iter": 4850, "lr": 0.01, "memory": 4897, "data_time": 0.0009, "decode.loss_ce": 0.23993, "decode.acc_seg": 50.42523, "aux.loss_ce": 0.07604, "aux.acc_seg": 50.30579, "loss": 0.31598, "time": 0.04831}
{"mode": "train", "epoch": 1, "iter": 4900, "lr": 0.01, "memory": 4897, "data_time": 0.00087, "decode.loss_ce": 0.19703, "decode.acc_seg": 50.51709, "aux.loss_ce": 0.05883, "aux.acc_seg": 50.41034, "loss": 0.25586, "time": 0.04855}
{"mode": "train", "epoch": 1, "iter": 4950, "lr": 0.01, "memory": 4897, "data_time": 0.00087, "decode.loss_ce": 0.20092, "decode.acc_seg": 46.72092, "aux.loss_ce": 0.05302, "aux.acc_seg": 46.72272, "loss": 0.25394, "time": 0.04863}
{"mode": "train", "epoch": 1, "iter": 5000, "lr": 0.01, "memory": 4897, "data_time": 0.00092, "decode.loss_ce": 0.21892, "decode.acc_seg": 47.7886, "aux.loss_ce": 0.06433, "aux.acc_seg": 47.65347, "loss": 0.28325, "time": 0.04828}
{"mode": "train", "epoch": 1, "iter": 5050, "lr": 0.01, "memory": 4897, "data_time": 0.00089, "decode.loss_ce": 0.25785, "decode.acc_seg": 48.50632, "aux.loss_ce": 0.08288, "aux.acc_seg": 48.43115, "loss": 0.34073, "time": 0.04855}
{"mode": "train", "epoch": 1, "iter": 5100, "lr": 0.01, "memory": 4897, "data_time": 0.00089, "decode.loss_ce": 0.19499, "decode.acc_seg": 47.02435, "aux.loss_ce": 0.06289, "aux.acc_seg": 47.04044, "loss": 0.25788, "time": 0.04882}
{"mode": "train", "epoch": 1, "iter": 5150, "lr": 0.01, "memory": 4897, "data_time": 0.00083, "decode.loss_ce": 0.17885, "decode.acc_seg": 46.36307, "aux.loss_ce": 0.05304, "aux.acc_seg": 46.35919, "loss": 0.23188, "time": 0.04883}
{"mode": "train", "epoch": 1, "iter": 5200, "lr": 0.01, "memory": 4897, "data_time": 0.00094, "decode.loss_ce": 0.19406, "decode.acc_seg": 45.30167, "aux.loss_ce": 0.05085, "aux.acc_seg": 45.22714, "loss": 0.24492, "time": 0.04848}
{"mode": "train", "epoch": 1, "iter": 5250, "lr": 0.01, "memory": 4897, "data_time": 0.00085, "decode.loss_ce": 0.21407, "decode.acc_seg": 48.5231, "aux.loss_ce": 0.0579, "aux.acc_seg": 48.53922, "loss": 0.27196, "time": 0.04853}
{"mode": "train", "epoch": 1, "iter": 5300, "lr": 0.01, "memory": 4897, "data_time": 0.00091, "decode.loss_ce": 0.22527, "decode.acc_seg": 47.93488, "aux.loss_ce": 0.06631, "aux.acc_seg": 48.01974, "loss": 0.29157, "time": 0.04829}
{"mode": "train", "epoch": 1, "iter": 5350, "lr": 0.01, "memory": 4897, "data_time": 0.00087, "decode.loss_ce": 0.17701, "decode.acc_seg": 44.40237, "aux.loss_ce": 0.05332, "aux.acc_seg": 44.37488, "loss": 0.23033, "time": 0.04841}
{"mode": "train", "epoch": 1, "iter": 5400, "lr": 0.01, "memory": 4897, "data_time": 0.00088, "decode.loss_ce": 0.21889, "decode.acc_seg": 47.08667, "aux.loss_ce": 0.06161, "aux.acc_seg": 47.0759, "loss": 0.28049, "time": 0.04842}
{"mode": "train", "epoch": 1, "iter": 5450, "lr": 0.01, "memory": 4897, "data_time": 0.00084, "decode.loss_ce": 0.22835, "decode.acc_seg": 47.44092, "aux.loss_ce": 0.06937, "aux.acc_seg": 47.3721, "loss": 0.29772, "time": 0.04833}
{"mode": "train", "epoch": 1, "iter": 5500, "lr": 0.01, "memory": 4897, "data_time": 0.00089, "decode.loss_ce": 0.18563, "decode.acc_seg": 47.87155, "aux.loss_ce": 0.04795, "aux.acc_seg": 47.86331, "loss": 0.23358, "time": 0.04819}
{"mode": "train", "epoch": 1, "iter": 5550, "lr": 0.01, "memory": 4897, "data_time": 0.00091, "decode.loss_ce": 0.24221, "decode.acc_seg": 46.76334, "aux.loss_ce": 0.07838, "aux.acc_seg": 46.75916, "loss": 0.32059, "time": 0.04864}
{"mode": "train", "epoch": 1, "iter": 5600, "lr": 0.01, "memory": 4897, "data_time": 0.00085, "decode.loss_ce": 0.19252, "decode.acc_seg": 48.89551, "aux.loss_ce": 0.05538, "aux.acc_seg": 48.89981, "loss": 0.24789, "time": 0.0483}
{"mode": "train", "epoch": 1, "iter": 5650, "lr": 0.01, "memory": 4897, "data_time": 0.00091, "decode.loss_ce": 0.21251, "decode.acc_seg": 48.6377, "aux.loss_ce": 0.05683, "aux.acc_seg": 48.44885, "loss": 0.26935, "time": 0.04827}
{"mode": "train", "epoch": 1, "iter": 5700, "lr": 0.01, "memory": 4897, "data_time": 0.00089, "decode.loss_ce": 0.20423, "decode.acc_seg": 48.33914, "aux.loss_ce": 0.0551, "aux.acc_seg": 48.29568, "loss": 0.25933, "time": 0.04847}
{"mode": "train", "epoch": 1, "iter": 5750, "lr": 0.01, "memory": 4897, "data_time": 0.00088, "decode.loss_ce": 0.2023, "decode.acc_seg": 45.89996, "aux.loss_ce": 0.06403, "aux.acc_seg": 45.89911, "loss": 0.26632, "time": 0.04858}
{"mode": "train", "epoch": 1, "iter": 5800, "lr": 0.01, "memory": 4897, "data_time": 0.00085, "decode.loss_ce": 0.20461, "decode.acc_seg": 50.01685, "aux.loss_ce": 0.05411, "aux.acc_seg": 50.00647, "loss": 0.25871, "time": 0.0483}
{"mode": "train", "epoch": 1, "iter": 5850, "lr": 0.01, "memory": 4897, "data_time": 0.0009, "decode.loss_ce": 0.20149, "decode.acc_seg": 44.59122, "aux.loss_ce": 0.05516, "aux.acc_seg": 44.58298, "loss": 0.25665, "time": 0.0484}
{"mode": "train", "epoch": 1, "iter": 5900, "lr": 0.01, "memory": 4897, "data_time": 0.00091, "decode.loss_ce": 0.22351, "decode.acc_seg": 46.63147, "aux.loss_ce": 0.06398, "aux.acc_seg": 46.65305, "loss": 0.2875, "time": 0.04864}
{"mode": "train", "epoch": 1, "iter": 5950, "lr": 0.01, "memory": 4897, "data_time": 0.00086, "decode.loss_ce": 0.27064, "decode.acc_seg": 46.41528, "aux.loss_ce": 0.09409, "aux.acc_seg": 46.37048, "loss": 0.36473, "time": 0.0482}
{"mode": "train", "epoch": 1, "iter": 6000, "lr": 0.01, "memory": 4897, "data_time": 0.00087, "decode.loss_ce": 0.19648, "decode.acc_seg": 47.96893, "aux.loss_ce": 0.05512, "aux.acc_seg": 47.80832, "loss": 0.25161, "time": 0.04838}
{"mode": "train", "epoch": 1, "iter": 6050, "lr": 0.01, "memory": 4897, "data_time": 0.0009, "decode.loss_ce": 0.18858, "decode.acc_seg": 51.22501, "aux.loss_ce": 0.05595, "aux.acc_seg": 51.23746, "loss": 0.24453, "time": 0.04836}
{"mode": "train", "epoch": 1, "iter": 6100, "lr": 0.01, "memory": 4897, "data_time": 0.00097, "decode.loss_ce": 0.1969, "decode.acc_seg": 50.66104, "aux.loss_ce": 0.05358, "aux.acc_seg": 50.66089, "loss": 0.25048, "time": 0.04839}
{"mode": "train", "epoch": 1, "iter": 6150, "lr": 0.01, "memory": 4897, "data_time": 0.00095, "decode.loss_ce": 0.25498, "decode.acc_seg": 44.17703, "aux.loss_ce": 0.08238, "aux.acc_seg": 44.1431, "loss": 0.33736, "time": 0.04832}
{"mode": "train", "epoch": 1, "iter": 6200, "lr": 0.01, "memory": 4897, "data_time": 0.0009, "decode.loss_ce": 0.2041, "decode.acc_seg": 48.96881, "aux.loss_ce": 0.06389, "aux.acc_seg": 48.97357, "loss": 0.268, "time": 0.04856}
{"mode": "train", "epoch": 1, "iter": 6250, "lr": 0.01, "memory": 4897, "data_time": 0.00099, "decode.loss_ce": 0.18568, "decode.acc_seg": 48.0032, "aux.loss_ce": 0.05117, "aux.acc_seg": 48.03647, "loss": 0.23684, "time": 0.04869}
{"mode": "train", "epoch": 1, "iter": 6300, "lr": 0.01, "memory": 4897, "data_time": 0.00087, "decode.loss_ce": 0.24985, "decode.acc_seg": 46.68607, "aux.loss_ce": 0.07253, "aux.acc_seg": 46.65622, "loss": 0.32238, "time": 0.04836}
{"mode": "train", "epoch": 1, "iter": 6350, "lr": 0.01, "memory": 4897, "data_time": 0.00087, "decode.loss_ce": 0.22093, "decode.acc_seg": 48.03174, "aux.loss_ce": 0.07316, "aux.acc_seg": 47.80209, "loss": 0.29409, "time": 0.0482}
{"mode": "train", "epoch": 1, "iter": 6400, "lr": 0.01, "memory": 4897, "data_time": 0.00089, "decode.loss_ce": 0.22354, "decode.acc_seg": 47.53598, "aux.loss_ce": 0.06696, "aux.acc_seg": 47.60745, "loss": 0.29049, "time": 0.04872}
{"mode": "train", "epoch": 1, "iter": 6450, "lr": 0.01, "memory": 4897, "data_time": 0.00088, "decode.loss_ce": 0.21762, "decode.acc_seg": 45.83017, "aux.loss_ce": 0.06221, "aux.acc_seg": 45.65125, "loss": 0.27983, "time": 0.04816}
{"mode": "train", "epoch": 1, "iter": 6500, "lr": 0.01, "memory": 4897, "data_time": 0.00091, "decode.loss_ce": 0.2423, "decode.acc_seg": 46.57419, "aux.loss_ce": 0.07735, "aux.acc_seg": 46.53244, "loss": 0.31965, "time": 0.04843}
{"mode": "train", "epoch": 1, "iter": 6550, "lr": 0.01, "memory": 4897, "data_time": 0.0009, "decode.loss_ce": 0.24686, "decode.acc_seg": 48.96854, "aux.loss_ce": 0.07463, "aux.acc_seg": 48.90353, "loss": 0.32149, "time": 0.04822}
{"mode": "train", "epoch": 1, "iter": 6600, "lr": 0.01, "memory": 4897, "data_time": 0.00095, "decode.loss_ce": 0.1748, "decode.acc_seg": 49.65768, "aux.loss_ce": 0.05112, "aux.acc_seg": 49.6503, "loss": 0.22592, "time": 0.04849}
{"mode": "train", "epoch": 1, "iter": 6650, "lr": 0.01, "memory": 4897, "data_time": 0.0009, "decode.loss_ce": 0.17626, "decode.acc_seg": 44.79846, "aux.loss_ce": 0.04063, "aux.acc_seg": 44.79846, "loss": 0.21689, "time": 0.04867}
{"mode": "train", "epoch": 1, "iter": 6700, "lr": 0.01, "memory": 4897, "data_time": 0.00087, "decode.loss_ce": 0.19402, "decode.acc_seg": 47.68927, "aux.loss_ce": 0.0445, "aux.acc_seg": 47.69101, "loss": 0.23851, "time": 0.04837}
{"mode": "train", "epoch": 1, "iter": 6750, "lr": 0.01, "memory": 4897, "data_time": 0.00088, "decode.loss_ce": 0.23828, "decode.acc_seg": 46.49905, "aux.loss_ce": 0.07402, "aux.acc_seg": 46.49905, "loss": 0.3123, "time": 0.04844}
{"mode": "train", "epoch": 1, "iter": 6800, "lr": 0.01, "memory": 4897, "data_time": 0.00089, "decode.loss_ce": 0.22194, "decode.acc_seg": 46.70786, "aux.loss_ce": 0.07169, "aux.acc_seg": 46.70786, "loss": 0.29363, "time": 0.04818}
{"mode": "train", "epoch": 1, "iter": 6850, "lr": 0.01, "memory": 4897, "data_time": 0.00099, "decode.loss_ce": 0.21989, "decode.acc_seg": 44.41092, "aux.loss_ce": 0.06025, "aux.acc_seg": 44.41089, "loss": 0.28013, "time": 0.04835}
{"mode": "train", "epoch": 1, "iter": 6900, "lr": 0.01, "memory": 4897, "data_time": 0.00092, "decode.loss_ce": 0.19952, "decode.acc_seg": 46.95618, "aux.loss_ce": 0.05516, "aux.acc_seg": 46.95618, "loss": 0.25468, "time": 0.04845}
{"mode": "train", "epoch": 1, "iter": 6950, "lr": 0.01, "memory": 4897, "data_time": 0.00088, "decode.loss_ce": 0.21265, "decode.acc_seg": 48.32834, "aux.loss_ce": 0.06079, "aux.acc_seg": 48.32764, "loss": 0.27343, "time": 0.04874}
{"mode": "train", "epoch": 1, "iter": 7000, "lr": 0.01, "memory": 4897, "data_time": 0.00085, "decode.loss_ce": 0.19652, "decode.acc_seg": 49.30734, "aux.loss_ce": 0.05621, "aux.acc_seg": 49.30734, "loss": 0.25273, "time": 0.0486}
{"mode": "train", "epoch": 1, "iter": 7050, "lr": 0.01, "memory": 4897, "data_time": 0.0009, "decode.loss_ce": 0.23005, "decode.acc_seg": 44.96994, "aux.loss_ce": 0.07449, "aux.acc_seg": 44.96964, "loss": 0.30454, "time": 0.04855}
{"mode": "train", "epoch": 1, "iter": 7100, "lr": 0.01, "memory": 4897, "data_time": 0.00091, "decode.loss_ce": 0.2398, "decode.acc_seg": 45.27554, "aux.loss_ce": 0.07258, "aux.acc_seg": 45.15002, "loss": 0.31238, "time": 0.04839}
