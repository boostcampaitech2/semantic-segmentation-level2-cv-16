{"env_info": "sys.platform: linux\nPython: 3.8.5 (default, Sep  4 2020, 07:30:14) [GCC 7.3.0]\nCUDA available: True\nGPU 0: Tesla V100-SXM2-32GB\nCUDA_HOME: None\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.3-Product Build 20210617 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.2\nOpenCV: 4.5.4-dev\nMMCV: 1.3.16\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMSegmentation: 0.18.0+b789c8c", "seed": null, "exp_name": "default_config.py", "mmseg_version": "0.18.0+b789c8c", "config": "pretrained_link = 'https://download.openmmlab.com/mmsegmentation/v0.5/unet/pspnet_unet_s5-d16_128x128_40k_stare/pspnet_unet_s5-d16_128x128_40k_stare_20201227_181818-3c2923c4.pth'\ndataset_type = 'CustomDataset'\ndata_root = '/opt/ml/segmentation/input/data/mmseg/'\nimg_scale = (512, 512)\ncrop_size = (128, 128)\nclasses = [\n    'Background', 'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n    'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n]\npalette = [[0, 0, 0], [192, 0, 128], [0, 128, 192], [0, 128, 64], [128, 0, 0],\n           [64, 0, 128], [64, 0, 192], [192, 128, 64], [192, 192, 128],\n           [64, 64, 128], [128, 0, 192]]\nnorm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained=\n    'https://download.openmmlab.com/mmsegmentation/v0.5/unet/pspnet_unet_s5-d16_128x128_40k_stare/pspnet_unet_s5-d16_128x128_40k_stare_20201227_181818-3c2923c4.pth',\n    backbone=dict(\n        type='UNet',\n        in_channels=3,\n        base_channels=64,\n        num_stages=5,\n        strides=(1, 1, 1, 1, 1),\n        enc_num_convs=(2, 2, 2, 2, 2),\n        dec_num_convs=(2, 2, 2, 2),\n        downsamples=(True, True, True, True),\n        enc_dilations=(1, 1, 1, 1, 1),\n        dec_dilations=(1, 1, 1, 1),\n        with_cp=False,\n        conv_cfg=None,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        act_cfg=dict(type='ReLU'),\n        upsample_cfg=dict(type='InterpConv'),\n        norm_eval=False,\n        pretrained=\n        'https://download.openmmlab.com/mmsegmentation/v0.5/unet/pspnet_unet_s5-d16_128x128_40k_stare/pspnet_unet_s5-d16_128x128_40k_stare_20201227_181818-3c2923c4.pth'\n    ),\n    decode_head=dict(\n        type='PSPHead',\n        in_channels=64,\n        in_index=4,\n        channels=16,\n        pool_scales=(1, 2, 3, 6),\n        dropout_ratio=0.1,\n        num_classes=2,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    auxiliary_head=dict(\n        type='FCNHead',\n        in_channels=128,\n        in_index=3,\n        channels=64,\n        num_convs=1,\n        concat_input=False,\n        dropout_ratio=0.1,\n        num_classes=2,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),\n    train_cfg=dict(),\n    test_cfg=dict(mode='slide', crop_size=(128, 128), stride=(85, 85)))\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(512, 512), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(128, 128), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(128, 128), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(512, 512),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=4,\n    train=dict(\n        classes=[\n            'Background', 'General trash', 'Paper', 'Paper pack', 'Metal',\n            'Glass', 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n            'Clothing'\n        ],\n        palette=[[0, 0, 0], [192, 0, 128], [0, 128, 192], [0, 128, 64],\n                 [128, 0, 0], [64, 0, 128], [64, 0, 192], [192, 128, 64],\n                 [192, 192, 128], [64, 64, 128], [128, 0, 192]],\n        type='CustomDataset',\n        reduce_zero_label=False,\n        img_dir='/opt/ml/segmentation/input/data/mmseg/images/training',\n        ann_dir='/opt/ml/segmentation/input/data/mmseg/annotations/training',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations'),\n            dict(type='Resize', img_scale=(512, 512), ratio_range=(0.5, 2.0)),\n            dict(type='RandomCrop', crop_size=(128, 128), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size=(128, 128), pad_val=0, seg_pad_val=255),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        classes=[\n            'Background', 'General trash', 'Paper', 'Paper pack', 'Metal',\n            'Glass', 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n            'Clothing'\n        ],\n        palette=[[0, 0, 0], [192, 0, 128], [0, 128, 192], [0, 128, 64],\n                 [128, 0, 0], [64, 0, 128], [64, 0, 192], [192, 128, 64],\n                 [192, 192, 128], [64, 64, 128], [128, 0, 192]],\n        type='CustomDataset',\n        reduce_zero_label=False,\n        img_dir='/opt/ml/segmentation/input/data/mmseg/images/validation',\n        ann_dir='/opt/ml/segmentation/input/data/mmseg/annotations/validation',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(512, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        classes=[\n            'Background', 'General trash', 'Paper', 'Paper pack', 'Metal',\n            'Glass', 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n            'Clothing'\n        ],\n        palette=[[0, 0, 0], [192, 0, 128], [0, 128, 192], [0, 128, 64],\n                 [128, 0, 0], [64, 0, 128], [64, 0, 192], [192, 128, 64],\n                 [192, 192, 128], [64, 64, 128], [128, 0, 192]],\n        type='CustomDataset',\n        reduce_zero_label=False,\n        img_dir='/opt/ml/segmentation/input/data/mmseg/images/test',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(512, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=1,\n    hooks=[\n        dict(type='TextLoggerHook', by_epoch=False, interval=100),\n        dict(\n            type='WandbLoggerHook',\n            init_kwargs=dict(\n                project='segmentation',\n                name='tmp-pspnet_unet',\n                entity='passion-ate'))\n    ])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'https://download.openmmlab.com/mmsegmentation/v0.5/unet/pspnet_unet_s5-d16_128x128_40k_stare/pspnet_unet_s5-d16_128x128_40k_stare_20201227_181818-3c2923c4.pth'\nresume_from = None\nworkflow = [('train', 1), ('val', 1)]\ncudnn_benchmark = True\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict()\nlr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)\nrunner = dict(type='EpochBasedRunner', max_epochs=50)\ncheckpoint_config = dict(max_keep_ckpts=2, by_epoch=True, interval=1)\nevaluation = dict(interval=1, metric='mDice', pre_eval=True)\nwork_dir = './work_dir/'\ngpu_ids = range(0, 1)\nseed = None\n", "CLASSES": ["Background", "General trash", "Paper", "Paper pack", "Metal", "Glass", "Plastic", "Styrofoam", "Plastic bag", "Battery", "Clothing"], "PALETTE": [[0, 0, 0], [192, 0, 128], [0, 128, 192], [0, 128, 64], [128, 0, 0], [64, 0, 128], [64, 0, 192], [192, 128, 64], [192, 192, 128], [64, 64, 128], [128, 0, 192]]}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00997, "memory": 4897, "data_time": 0.02291, "decode.loss_ce": 0.3082, "decode.acc_seg": 45.56448, "aux.loss_ce": 0.09548, "aux.acc_seg": 45.93843, "loss": 0.40369, "time": 0.08553}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00995, "memory": 4897, "data_time": 0.00111, "decode.loss_ce": 0.21895, "decode.acc_seg": 47.46562, "aux.loss_ce": 0.06495, "aux.acc_seg": 47.47714, "loss": 0.2839, "time": 0.04814}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00992, "memory": 4897, "data_time": 0.00112, "decode.loss_ce": 0.23683, "decode.acc_seg": 47.34807, "aux.loss_ce": 0.07312, "aux.acc_seg": 47.23901, "loss": 0.30995, "time": 0.04814}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.00989, "memory": 4897, "data_time": 0.00109, "decode.loss_ce": 0.22633, "decode.acc_seg": 48.29477, "aux.loss_ce": 0.06179, "aux.acc_seg": 48.4303, "loss": 0.28812, "time": 0.04824}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00986, "memory": 4897, "data_time": 0.00114, "decode.loss_ce": 0.22757, "decode.acc_seg": 48.56032, "aux.loss_ce": 0.06373, "aux.acc_seg": 48.51242, "loss": 0.2913, "time": 0.04814}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.00984, "memory": 4897, "data_time": 0.00116, "decode.loss_ce": 0.1829, "decode.acc_seg": 47.05437, "aux.loss_ce": 0.04565, "aux.acc_seg": 47.15146, "loss": 0.22856, "time": 0.04829}
{"mode": "val", "epoch": 1, "iter": 655, "lr": 0.00982, "aAcc": 0.6984, "mDice": 0.0779, "mAcc": 0.0926, "Dice.Background": 0.8237, "Dice.General trash": 0.0332, "Dice.Paper": 0.0, "Dice.Paper pack": 0.0, "Dice.Metal": 0.0, "Dice.Glass": 0.0, "Dice.Plastic": 0.0, "Dice.Styrofoam": 0.0, "Dice.Plastic bag": 0.0, "Dice.Battery": 0.0, "Dice.Clothing": 0.0, "Acc.Background": 0.9988, "Acc.General trash": 0.0199, "Acc.Paper": 0.0, "Acc.Paper pack": 0.0, "Acc.Metal": 0.0, "Acc.Glass": 0.0, "Acc.Plastic": 0.0, "Acc.Styrofoam": 0.0, "Acc.Plastic bag": 0.0, "Acc.Battery": 0.0, "Acc.Clothing": 0.0}
{"mode": "val", "epoch": 1, "iter": 655, "lr": 0.00982, "memory": 4897, "data_time": 0.01459, "decode.loss_ce": 0.19433, "decode.acc_seg": 46.73669, "aux.loss_ce": 0.09558, "aux.acc_seg": 46.67659, "loss": 0.28991, "time": 0.02927}
{"mode": "train", "epoch": 2, "iter": 700, "lr": 0.00981, "memory": 4897, "data_time": 0.04925, "decode.loss_ce": 0.23791, "decode.acc_seg": 44.75522, "aux.loss_ce": 0.06928, "aux.acc_seg": 44.39545, "loss": 0.30719, "time": 0.09653}
{"mode": "train", "epoch": 2, "iter": 800, "lr": 0.00978, "memory": 4897, "data_time": 0.00112, "decode.loss_ce": 0.22607, "decode.acc_seg": 46.49809, "aux.loss_ce": 0.06774, "aux.acc_seg": 46.88345, "loss": 0.29381, "time": 0.0482}
{"mode": "train", "epoch": 2, "iter": 900, "lr": 0.00975, "memory": 4897, "data_time": 0.00112, "decode.loss_ce": 0.21956, "decode.acc_seg": 47.70329, "aux.loss_ce": 0.05828, "aux.acc_seg": 47.77371, "loss": 0.27784, "time": 0.04841}
{"mode": "train", "epoch": 2, "iter": 1000, "lr": 0.00973, "memory": 4897, "data_time": 0.00114, "decode.loss_ce": 0.20794, "decode.acc_seg": 48.10924, "aux.loss_ce": 0.06214, "aux.acc_seg": 48.29086, "loss": 0.27008, "time": 0.04816}
{"mode": "train", "epoch": 2, "iter": 1100, "lr": 0.0097, "memory": 4897, "data_time": 0.00114, "decode.loss_ce": 0.24644, "decode.acc_seg": 47.3242, "aux.loss_ce": 0.06538, "aux.acc_seg": 47.39696, "loss": 0.31181, "time": 0.0482}
{"mode": "train", "epoch": 2, "iter": 1200, "lr": 0.00967, "memory": 4897, "data_time": 0.00116, "decode.loss_ce": 0.20331, "decode.acc_seg": 47.77521, "aux.loss_ce": 0.05574, "aux.acc_seg": 47.68364, "loss": 0.25905, "time": 0.04822}
{"mode": "train", "epoch": 2, "iter": 1300, "lr": 0.00965, "memory": 4897, "data_time": 0.00125, "decode.loss_ce": 0.2019, "decode.acc_seg": 48.32861, "aux.loss_ce": 0.05784, "aux.acc_seg": 48.38448, "loss": 0.25974, "time": 0.04895}
{"mode": "val", "epoch": 2, "iter": 655, "lr": 0.00964, "aAcc": 0.6988, "mDice": 0.0759, "mAcc": 0.0915, "Dice.Background": 0.8232, "Dice.General trash": 0.0119, "Dice.Paper": 0.0, "Dice.Paper pack": 0.0, "Dice.Metal": 0.0, "Dice.Glass": 0.0, "Dice.Plastic": 0.0, "Dice.Styrofoam": 0.0, "Dice.Plastic bag": 0.0, "Dice.Battery": 0.0, "Dice.Clothing": 0.0, "Acc.Background": 0.9999, "Acc.General trash": 0.0063, "Acc.Paper": 0.0, "Acc.Paper pack": 0.0, "Acc.Metal": 0.0, "Acc.Glass": 0.0, "Acc.Plastic": 0.0, "Acc.Styrofoam": 0.0, "Acc.Plastic bag": 0.0, "Acc.Battery": 0.0, "Acc.Clothing": 0.0}
{"mode": "val", "epoch": 2, "iter": 1309, "lr": 0.00964, "memory": 4897, "data_time": 0.01485, "decode.loss_ce": 0.20232, "decode.acc_seg": 47.80602, "aux.loss_ce": 0.09176, "aux.acc_seg": 47.81659, "loss": 0.29408, "time": 0.02961}
{"mode": "train", "epoch": 3, "iter": 1400, "lr": 0.00962, "memory": 4897, "data_time": 0.0253, "decode.loss_ce": 0.20457, "decode.acc_seg": 46.15596, "aux.loss_ce": 0.06024, "aux.acc_seg": 46.15439, "loss": 0.26481, "time": 0.07274}
{"mode": "train", "epoch": 3, "iter": 1500, "lr": 0.00959, "memory": 4897, "data_time": 0.00112, "decode.loss_ce": 0.22221, "decode.acc_seg": 48.2753, "aux.loss_ce": 0.05732, "aux.acc_seg": 48.36975, "loss": 0.27953, "time": 0.04828}
{"mode": "train", "epoch": 3, "iter": 1600, "lr": 0.00956, "memory": 4897, "data_time": 0.0011, "decode.loss_ce": 0.22964, "decode.acc_seg": 48.54108, "aux.loss_ce": 0.0718, "aux.acc_seg": 48.40289, "loss": 0.30144, "time": 0.04796}
{"mode": "train", "epoch": 3, "iter": 1700, "lr": 0.00954, "memory": 4897, "data_time": 0.00112, "decode.loss_ce": 0.20726, "decode.acc_seg": 47.35425, "aux.loss_ce": 0.0585, "aux.acc_seg": 47.01279, "loss": 0.26576, "time": 0.04836}
{"mode": "train", "epoch": 3, "iter": 1800, "lr": 0.00951, "memory": 4897, "data_time": 0.00109, "decode.loss_ce": 0.24699, "decode.acc_seg": 46.65762, "aux.loss_ce": 0.07521, "aux.acc_seg": 46.88911, "loss": 0.3222, "time": 0.04814}
{"mode": "train", "epoch": 3, "iter": 1900, "lr": 0.00948, "memory": 4897, "data_time": 0.00132, "decode.loss_ce": 0.23166, "decode.acc_seg": 46.10085, "aux.loss_ce": 0.0706, "aux.acc_seg": 46.2144, "loss": 0.30226, "time": 0.04853}
{"mode": "val", "epoch": 3, "iter": 655, "lr": 0.00946, "aAcc": 0.6987, "mDice": 0.075, "mAcc": 0.091, "Dice.Background": 0.8227, "Dice.General trash": 0.0019, "Dice.Paper": 0.0, "Dice.Paper pack": 0.0, "Dice.Metal": 0.0, "Dice.Glass": 0.0, "Dice.Plastic": 0.0, "Dice.Styrofoam": 0.0, "Dice.Plastic bag": 0.0, "Dice.Battery": 0.0, "Dice.Clothing": 0.0, "Acc.Background": 0.9998, "Acc.General trash": 0.0009, "Acc.Paper": 0.0, "Acc.Paper pack": 0.0, "Acc.Metal": 0.0, "Acc.Glass": 0.0, "Acc.Plastic": 0.0, "Acc.Styrofoam": 0.0, "Acc.Plastic bag": 0.0, "Acc.Battery": 0.0, "Acc.Clothing": 0.0}
{"mode": "val", "epoch": 3, "iter": 1963, "lr": 0.00946, "memory": 4897, "data_time": 0.01408, "decode.loss_ce": 0.16274, "decode.acc_seg": 48.08278, "aux.loss_ce": 0.08144, "aux.acc_seg": 48.07249, "loss": 0.24417, "time": 0.0298}
{"mode": "train", "epoch": 4, "iter": 2000, "lr": 0.00945, "memory": 4897, "data_time": 0.06052, "decode.loss_ce": 0.19776, "decode.acc_seg": 45.20573, "aux.loss_ce": 0.05014, "aux.acc_seg": 45.14915, "loss": 0.2479, "time": 0.1076}
{"mode": "train", "epoch": 4, "iter": 2100, "lr": 0.00943, "memory": 4897, "data_time": 0.00115, "decode.loss_ce": 0.23465, "decode.acc_seg": 46.99792, "aux.loss_ce": 0.06978, "aux.acc_seg": 46.86392, "loss": 0.30443, "time": 0.04825}
{"mode": "train", "epoch": 4, "iter": 2200, "lr": 0.0094, "memory": 4897, "data_time": 0.00112, "decode.loss_ce": 0.21537, "decode.acc_seg": 49.10475, "aux.loss_ce": 0.06309, "aux.acc_seg": 49.05629, "loss": 0.27847, "time": 0.04797}
{"mode": "train", "epoch": 4, "iter": 2300, "lr": 0.00937, "memory": 4897, "data_time": 0.00117, "decode.loss_ce": 0.23633, "decode.acc_seg": 47.97955, "aux.loss_ce": 0.07103, "aux.acc_seg": 48.15063, "loss": 0.30736, "time": 0.04835}
{"mode": "train", "epoch": 4, "iter": 2400, "lr": 0.00934, "memory": 4897, "data_time": 0.00115, "decode.loss_ce": 0.21009, "decode.acc_seg": 46.06779, "aux.loss_ce": 0.06239, "aux.acc_seg": 46.07823, "loss": 0.27248, "time": 0.04832}
{"mode": "train", "epoch": 4, "iter": 2500, "lr": 0.00932, "memory": 4897, "data_time": 0.00113, "decode.loss_ce": 0.19755, "decode.acc_seg": 49.24809, "aux.loss_ce": 0.05657, "aux.acc_seg": 49.37874, "loss": 0.25412, "time": 0.04837}
{"mode": "train", "epoch": 4, "iter": 2600, "lr": 0.00929, "memory": 4897, "data_time": 0.00116, "decode.loss_ce": 0.22464, "decode.acc_seg": 47.44362, "aux.loss_ce": 0.06379, "aux.acc_seg": 47.31448, "loss": 0.28843, "time": 0.04848}
