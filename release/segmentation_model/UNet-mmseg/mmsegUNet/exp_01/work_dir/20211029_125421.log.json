{"env_info": "sys.platform: linux\nPython: 3.8.5 (default, Sep  4 2020, 07:30:14) [GCC 7.3.0]\nCUDA available: True\nGPU 0: Tesla V100-SXM2-32GB\nCUDA_HOME: None\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.3-Product Build 20210617 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.2\nOpenCV: 4.5.4-dev\nMMCV: 1.3.16\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMSegmentation: 0.18.0+b789c8c", "seed": null, "exp_name": "default_config.py", "mmseg_version": "0.18.0+b789c8c", "config": "pretrained_link = 'https://download.openmmlab.com/mmsegmentation/v0.5/unet/pspnet_unet_s5-d16_128x128_40k_stare/pspnet_unet_s5-d16_128x128_40k_stare_20201227_181818-3c2923c4.pth'\ndataset_type = 'CustomDataset'\ndata_root = '/opt/ml/segmentation/input/data/mmseg/'\nimg_scale = (512, 512)\ncrop_size = (128, 128)\nclasses = [\n    'Background', 'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n    'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n]\npalette = [[0, 0, 0], [192, 0, 128], [0, 128, 192], [0, 128, 64], [128, 0, 0],\n           [64, 0, 128], [64, 0, 192], [192, 128, 64], [192, 192, 128],\n           [64, 64, 128], [128, 0, 192]]\nnorm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained=\n    'https://download.openmmlab.com/mmsegmentation/v0.5/unet/pspnet_unet_s5-d16_128x128_40k_stare/pspnet_unet_s5-d16_128x128_40k_stare_20201227_181818-3c2923c4.pth',\n    backbone=dict(\n        type='UNet',\n        in_channels=3,\n        base_channels=64,\n        num_stages=5,\n        strides=(1, 1, 1, 1, 1),\n        enc_num_convs=(2, 2, 2, 2, 2),\n        dec_num_convs=(2, 2, 2, 2),\n        downsamples=(True, True, True, True),\n        enc_dilations=(1, 1, 1, 1, 1),\n        dec_dilations=(1, 1, 1, 1),\n        with_cp=False,\n        conv_cfg=None,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        act_cfg=dict(type='ReLU'),\n        upsample_cfg=dict(type='InterpConv'),\n        norm_eval=False,\n        pretrained=\n        'https://download.openmmlab.com/mmsegmentation/v0.5/unet/pspnet_unet_s5-d16_128x128_40k_stare/pspnet_unet_s5-d16_128x128_40k_stare_20201227_181818-3c2923c4.pth'\n    ),\n    decode_head=dict(\n        type='PSPHead',\n        in_channels=64,\n        in_index=4,\n        channels=16,\n        pool_scales=(1, 2, 3, 6),\n        dropout_ratio=0.1,\n        num_classes=2,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    auxiliary_head=dict(\n        type='FCNHead',\n        in_channels=128,\n        in_index=3,\n        channels=64,\n        num_convs=1,\n        concat_input=False,\n        dropout_ratio=0.1,\n        num_classes=2,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),\n    train_cfg=dict(),\n    test_cfg=dict(mode='slide', crop_size=(128, 128), stride=(85, 85)))\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(512, 512), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(128, 128), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(128, 128), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(512, 512),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=4,\n    train=dict(\n        classes=[\n            'Background', 'General trash', 'Paper', 'Paper pack', 'Metal',\n            'Glass', 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n            'Clothing'\n        ],\n        palette=[[0, 0, 0], [192, 0, 128], [0, 128, 192], [0, 128, 64],\n                 [128, 0, 0], [64, 0, 128], [64, 0, 192], [192, 128, 64],\n                 [192, 192, 128], [64, 64, 128], [128, 0, 192]],\n        type='CustomDataset',\n        reduce_zero_label=False,\n        img_dir='/opt/ml/segmentation/input/data/mmseg/images/training',\n        ann_dir='/opt/ml/segmentation/input/data/mmseg/annotations/training',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations'),\n            dict(type='Resize', img_scale=(512, 512), ratio_range=(0.5, 2.0)),\n            dict(type='RandomCrop', crop_size=(128, 128), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size=(128, 128), pad_val=0, seg_pad_val=255),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        classes=[\n            'Background', 'General trash', 'Paper', 'Paper pack', 'Metal',\n            'Glass', 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n            'Clothing'\n        ],\n        palette=[[0, 0, 0], [192, 0, 128], [0, 128, 192], [0, 128, 64],\n                 [128, 0, 0], [64, 0, 128], [64, 0, 192], [192, 128, 64],\n                 [192, 192, 128], [64, 64, 128], [128, 0, 192]],\n        type='CustomDataset',\n        reduce_zero_label=False,\n        img_dir='/opt/ml/segmentation/input/data/mmseg/images/validation',\n        ann_dir='/opt/ml/segmentation/input/data/mmseg/annotations/validation',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(512, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        classes=[\n            'Background', 'General trash', 'Paper', 'Paper pack', 'Metal',\n            'Glass', 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n            'Clothing'\n        ],\n        palette=[[0, 0, 0], [192, 0, 128], [0, 128, 192], [0, 128, 64],\n                 [128, 0, 0], [64, 0, 128], [64, 0, 192], [192, 128, 64],\n                 [192, 192, 128], [64, 64, 128], [128, 0, 192]],\n        type='CustomDataset',\n        reduce_zero_label=False,\n        img_dir='/opt/ml/segmentation/input/data/mmseg/images/test',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(512, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    by_epoch=False,\n    interval=100,\n    hooks=[\n        dict(type='TextLoggerHook', by_epoch=False, interval=100),\n        dict(\n            type='WandbLoggerHook',\n            init_kwargs=dict(\n                project='segmentation',\n                name='tmp-pspnet_unet',\n                entity='passion-ate'),\n            by_epoch=False,\n            interval=100)\n    ])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'https://download.openmmlab.com/mmsegmentation/v0.5/unet/pspnet_unet_s5-d16_128x128_40k_stare/pspnet_unet_s5-d16_128x128_40k_stare_20201227_181818-3c2923c4.pth'\nresume_from = None\nworkflow = [('train', 1), ('val', 1)]\ncudnn_benchmark = True\noptimizer = dict(\n    type='AdamW',\n    lr=6e-05,\n    betas=(0.9, 0.999),\n    weight_decay=0.01,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict()\nlr_config = dict(\n    policy='poly',\n    warmup='linear',\n    warmup_iters=1500,\n    warmup_ratio=1e-06,\n    power=1.0,\n    min_lr=0.0,\n    by_epoch=False)\nrunner = dict(type='EpochBasedRunner', max_epochs=50)\ncheckpoint_config = dict(max_keep_ckpts=2, by_epoch=True, interval=1)\nevaluation = dict(\n    metric=['mDice', 'mIoU'], interval=1, by_epoch=True, pre_eval=True)\nwork_dir = './work_dir/'\ngpu_ids = range(0, 1)\nseed = None\n", "CLASSES": ["Background", "General trash", "Paper", "Paper pack", "Metal", "Glass", "Plastic", "Styrofoam", "Plastic bag", "Battery", "Clothing"], "PALETTE": [[0, 0, 0], [192, 0, 128], [0, 128, 192], [0, 128, 64], [128, 0, 0], [64, 0, 128], [64, 0, 192], [192, 128, 64], [192, 192, 128], [64, 64, 128], [128, 0, 192]]}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.0, "memory": 4897, "data_time": 0.02252, "decode.loss_ce": 0.54597, "decode.acc_seg": 44.96411, "aux.loss_ce": 0.16209, "aux.acc_seg": 45.69521, "loss": 0.70806, "time": 0.08759}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 1e-05, "memory": 4897, "data_time": 0.00068, "decode.loss_ce": 0.44642, "decode.acc_seg": 45.57722, "aux.loss_ce": 0.13242, "aux.acc_seg": 45.85513, "loss": 0.57884, "time": 0.05068}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 1e-05, "memory": 4897, "data_time": 0.00068, "decode.loss_ce": 0.43899, "decode.acc_seg": 47.15805, "aux.loss_ce": 0.12928, "aux.acc_seg": 47.3161, "loss": 0.56827, "time": 0.05078}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 2e-05, "memory": 4897, "data_time": 0.00064, "decode.loss_ce": 0.39708, "decode.acc_seg": 48.5497, "aux.loss_ce": 0.11404, "aux.acc_seg": 48.44724, "loss": 0.51112, "time": 0.05091}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 2e-05, "memory": 4897, "data_time": 0.00071, "decode.loss_ce": 0.28267, "decode.acc_seg": 47.55757, "aux.loss_ce": 0.07588, "aux.acc_seg": 47.52423, "loss": 0.35855, "time": 0.05077}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 2e-05, "memory": 4897, "data_time": 0.00069, "decode.loss_ce": 0.30088, "decode.acc_seg": 50.50465, "aux.loss_ce": 0.08477, "aux.acc_seg": 50.46208, "loss": 0.38566, "time": 0.0506}
{"mode": "val", "epoch": 1, "iter": 655, "lr": 3e-05, "aAcc": 0.6885, "mDice": 0.0774, "mAcc": 0.0923, "mIoU": 0.0647, "Dice.Background": 0.8208, "Dice.General trash": 0.0302, "Dice.Paper": 0.0, "Dice.Paper pack": 0.0, "Dice.Metal": 0.0, "Dice.Glass": 0.0, "Dice.Plastic": 0.0, "Dice.Styrofoam": 0.0, "Dice.Plastic bag": 0.0, "Dice.Battery": 0.0, "Dice.Clothing": 0.0, "Acc.Background": 0.9843, "Acc.General trash": 0.0312, "Acc.Paper": 0.0, "Acc.Paper pack": 0.0, "Acc.Metal": 0.0, "Acc.Glass": 0.0, "Acc.Plastic": 0.0, "Acc.Styrofoam": 0.0, "Acc.Plastic bag": 0.0, "Acc.Battery": 0.0, "Acc.Clothing": 0.0, "IoU.Background": 0.696, "IoU.General trash": 0.0153, "IoU.Paper": 0.0, "IoU.Paper pack": 0.0, "IoU.Metal": 0.0, "IoU.Glass": 0.0, "IoU.Plastic": 0.0, "IoU.Styrofoam": 0.0, "IoU.Plastic bag": 0.0, "IoU.Battery": 0.0, "IoU.Clothing": 0.0}
{"mode": "val", "epoch": 1, "iter": 655, "lr": 3e-05, "memory": 4897, "data_time": 0.01516, "decode.loss_ce": 0.25778, "decode.acc_seg": 45.83791, "aux.loss_ce": 0.07759, "aux.acc_seg": 45.93293, "loss": 0.33537, "time": 0.03058}
{"mode": "train", "epoch": 2, "iter": 700, "lr": 3e-05, "memory": 4897, "data_time": 0.04982, "decode.loss_ce": 0.3589, "decode.acc_seg": 49.09622, "aux.loss_ce": 0.10548, "aux.acc_seg": 48.93225, "loss": 0.46438, "time": 0.10062}
{"mode": "train", "epoch": 2, "iter": 800, "lr": 3e-05, "memory": 4897, "data_time": 0.00075, "decode.loss_ce": 0.3574, "decode.acc_seg": 48.37962, "aux.loss_ce": 0.09996, "aux.acc_seg": 48.20752, "loss": 0.45736, "time": 0.05159}
{"mode": "train", "epoch": 2, "iter": 900, "lr": 3e-05, "memory": 4897, "data_time": 0.00068, "decode.loss_ce": 0.38657, "decode.acc_seg": 44.83031, "aux.loss_ce": 0.09827, "aux.acc_seg": 44.74782, "loss": 0.48483, "time": 0.05121}
{"mode": "train", "epoch": 2, "iter": 1000, "lr": 4e-05, "memory": 4897, "data_time": 0.0007, "decode.loss_ce": 0.32894, "decode.acc_seg": 47.2939, "aux.loss_ce": 0.08029, "aux.acc_seg": 47.34242, "loss": 0.40923, "time": 0.0511}
{"mode": "train", "epoch": 2, "iter": 1100, "lr": 4e-05, "memory": 4897, "data_time": 0.00069, "decode.loss_ce": 0.29121, "decode.acc_seg": 48.20906, "aux.loss_ce": 0.06824, "aux.acc_seg": 48.15263, "loss": 0.35946, "time": 0.05113}
{"mode": "train", "epoch": 2, "iter": 1200, "lr": 5e-05, "memory": 4897, "data_time": 0.0007, "decode.loss_ce": 0.30684, "decode.acc_seg": 46.34601, "aux.loss_ce": 0.07449, "aux.acc_seg": 46.28555, "loss": 0.38133, "time": 0.05168}
{"mode": "train", "epoch": 2, "iter": 1300, "lr": 5e-05, "memory": 4897, "data_time": 0.00066, "decode.loss_ce": 0.31733, "decode.acc_seg": 48.94353, "aux.loss_ce": 0.08492, "aux.acc_seg": 48.6357, "loss": 0.40225, "time": 0.05087}
{"mode": "val", "epoch": 2, "iter": 655, "lr": 5e-05, "aAcc": 0.6983, "mDice": 0.0788, "mAcc": 0.0932, "mIoU": 0.0657, "Dice.Background": 0.8243, "Dice.General trash": 0.0427, "Dice.Paper": 0.0, "Dice.Paper pack": 0.0, "Dice.Metal": 0.0, "Dice.Glass": 0.0, "Dice.Plastic": 0.0, "Dice.Styrofoam": 0.0, "Dice.Plastic bag": 0.0, "Dice.Battery": 0.0, "Dice.Clothing": 0.0, "Acc.Background": 0.9984, "Acc.General trash": 0.0273, "Acc.Paper": 0.0, "Acc.Paper pack": 0.0, "Acc.Metal": 0.0, "Acc.Glass": 0.0, "Acc.Plastic": 0.0, "Acc.Styrofoam": 0.0, "Acc.Plastic bag": 0.0, "Acc.Battery": 0.0, "Acc.Clothing": 0.0, "IoU.Background": 0.7011, "IoU.General trash": 0.0218, "IoU.Paper": 0.0, "IoU.Paper pack": 0.0, "IoU.Metal": 0.0, "IoU.Glass": 0.0, "IoU.Plastic": 0.0, "IoU.Styrofoam": 0.0, "IoU.Plastic bag": 0.0, "IoU.Battery": 0.0, "IoU.Clothing": 0.0}
{"mode": "val", "epoch": 2, "iter": 1309, "lr": 5e-05, "memory": 4897, "data_time": 0.01495, "decode.loss_ce": 0.23243, "decode.acc_seg": 47.91623, "aux.loss_ce": 0.06931, "aux.acc_seg": 47.86326, "loss": 0.30174, "time": 0.03151}
{"mode": "train", "epoch": 3, "iter": 1400, "lr": 5e-05, "memory": 4897, "data_time": 0.02547, "decode.loss_ce": 0.34147, "decode.acc_seg": 46.78545, "aux.loss_ce": 0.07622, "aux.acc_seg": 46.78693, "loss": 0.4177, "time": 0.07642}
{"mode": "train", "epoch": 3, "iter": 1500, "lr": 6e-05, "memory": 4897, "data_time": 0.00077, "decode.loss_ce": 0.29425, "decode.acc_seg": 48.14854, "aux.loss_ce": 0.0703, "aux.acc_seg": 48.19522, "loss": 0.36456, "time": 0.05154}
{"mode": "train", "epoch": 3, "iter": 1600, "lr": 6e-05, "memory": 4897, "data_time": 0.00068, "decode.loss_ce": 0.42579, "decode.acc_seg": 46.99292, "aux.loss_ce": 0.09256, "aux.acc_seg": 46.81847, "loss": 0.51834, "time": 0.05176}
{"mode": "train", "epoch": 3, "iter": 1700, "lr": 6e-05, "memory": 4897, "data_time": 0.00077, "decode.loss_ce": 0.31943, "decode.acc_seg": 48.57698, "aux.loss_ce": 0.07284, "aux.acc_seg": 48.39203, "loss": 0.39227, "time": 0.05158}
{"mode": "train", "epoch": 3, "iter": 1800, "lr": 6e-05, "memory": 4897, "data_time": 0.00067, "decode.loss_ce": 0.2546, "decode.acc_seg": 47.72667, "aux.loss_ce": 0.05887, "aux.acc_seg": 47.7137, "loss": 0.31347, "time": 0.05116}
{"mode": "train", "epoch": 3, "iter": 1900, "lr": 6e-05, "memory": 4897, "data_time": 0.00072, "decode.loss_ce": 0.29697, "decode.acc_seg": 47.54274, "aux.loss_ce": 0.07475, "aux.acc_seg": 47.6465, "loss": 0.37172, "time": 0.05132}
{"mode": "val", "epoch": 3, "iter": 655, "lr": 6e-05, "aAcc": 0.6987, "mDice": 0.0836, "mAcc": 0.0977, "mIoU": 0.0686, "Dice.Background": 0.8278, "Dice.General trash": 0.0916, "Dice.Paper": 0.0, "Dice.Paper pack": 0.0, "Dice.Metal": 0.0, "Dice.Glass": 0.0, "Dice.Plastic": 0.0, "Dice.Styrofoam": 0.0, "Dice.Plastic bag": 0.0, "Dice.Battery": 0.0, "Dice.Clothing": 0.0, "Acc.Background": 0.9975, "Acc.General trash": 0.0772, "Acc.Paper": 0.0, "Acc.Paper pack": 0.0, "Acc.Metal": 0.0, "Acc.Glass": 0.0, "Acc.Plastic": 0.0, "Acc.Styrofoam": 0.0, "Acc.Plastic bag": 0.0, "Acc.Battery": 0.0, "Acc.Clothing": 0.0, "IoU.Background": 0.7062, "IoU.General trash": 0.048, "IoU.Paper": 0.0, "IoU.Paper pack": 0.0, "IoU.Metal": 0.0, "IoU.Glass": 0.0, "IoU.Plastic": 0.0, "IoU.Styrofoam": 0.0, "IoU.Plastic bag": 0.0, "IoU.Battery": 0.0, "IoU.Clothing": 0.0}
{"mode": "val", "epoch": 3, "iter": 1963, "lr": 6e-05, "memory": 4897, "data_time": 0.01505, "decode.loss_ce": 0.23465, "decode.acc_seg": 45.77611, "aux.loss_ce": 0.08041, "aux.acc_seg": 45.61737, "loss": 0.31506, "time": 0.0312}
{"mode": "train", "epoch": 4, "iter": 2000, "lr": 6e-05, "memory": 4897, "data_time": 0.05915, "decode.loss_ce": 0.25988, "decode.acc_seg": 47.79932, "aux.loss_ce": 0.05532, "aux.acc_seg": 47.89838, "loss": 0.3152, "time": 0.11073}
{"mode": "train", "epoch": 4, "iter": 2100, "lr": 6e-05, "memory": 4897, "data_time": 0.00071, "decode.loss_ce": 0.28138, "decode.acc_seg": 45.68123, "aux.loss_ce": 0.07587, "aux.acc_seg": 45.56334, "loss": 0.35725, "time": 0.05164}
