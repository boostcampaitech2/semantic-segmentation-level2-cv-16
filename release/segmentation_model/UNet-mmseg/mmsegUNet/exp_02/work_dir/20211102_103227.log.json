{"env_info": "sys.platform: linux\nPython: 3.8.5 (default, Sep  4 2020, 07:30:14) [GCC 7.3.0]\nCUDA available: True\nGPU 0: Tesla V100-SXM2-32GB\nCUDA_HOME: None\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.3-Product Build 20210617 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.2\nOpenCV: 4.5.4-dev\nMMCV: 1.3.16\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMSegmentation: 0.18.0+711cff1", "seed": null, "exp_name": "default_config.py", "mmseg_version": "0.18.0+711cff1", "config": "pretrained_link = 'https://download.openmmlab.com/mmsegmentation/v0.5/unet/pspnet_unet_s5-d16_128x128_40k_stare/pspnet_unet_s5-d16_128x128_40k_stare_20201227_181818-3c2923c4.pth'\ndataset_type = 'CustomDataset'\ndata_root = '/opt/ml/segmentation/input/data/mmseg/'\nimg_scale = (512, 512)\ncrop_size = (128, 128)\nclasses = [\n    'Background', 'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n    'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n]\npalette = [[0, 0, 0], [192, 0, 128], [0, 128, 192], [0, 128, 64], [128, 0, 0],\n           [64, 0, 128], [64, 0, 192], [192, 128, 64], [192, 192, 128],\n           [64, 64, 128], [128, 0, 192]]\nnorm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained=\n    'https://download.openmmlab.com/mmsegmentation/v0.5/unet/pspnet_unet_s5-d16_128x128_40k_stare/pspnet_unet_s5-d16_128x128_40k_stare_20201227_181818-3c2923c4.pth',\n    backbone=dict(\n        type='UNet',\n        in_channels=3,\n        base_channels=64,\n        num_stages=5,\n        strides=(1, 1, 1, 1, 1),\n        enc_num_convs=(2, 2, 2, 2, 2),\n        dec_num_convs=(2, 2, 2, 2),\n        downsamples=(True, True, True, True),\n        enc_dilations=(1, 1, 1, 1, 1),\n        dec_dilations=(1, 1, 1, 1),\n        with_cp=False,\n        conv_cfg=None,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        act_cfg=dict(type='ReLU'),\n        upsample_cfg=dict(type='InterpConv'),\n        norm_eval=False,\n        pretrained=\n        'https://download.openmmlab.com/mmsegmentation/v0.5/unet/pspnet_unet_s5-d16_128x128_40k_stare/pspnet_unet_s5-d16_128x128_40k_stare_20201227_181818-3c2923c4.pth'\n    ),\n    decode_head=dict(\n        type='PSPHead',\n        in_channels=64,\n        in_index=4,\n        channels=16,\n        pool_scales=(1, 2, 3, 6),\n        dropout_ratio=0.1,\n        num_classes=11,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss',\n            use_sigmoid=False,\n            loss_weight=1.0,\n            class_weight=[\n                0.12569045882504457, 0.06572725397779974, 0.1487976613352835,\n                0.07169089856307555, 0.02525688934502939, 0.057960431266748214,\n                0.12707596248744216, 0.07968132847344185, 0.10410474920439847,\n                0.14818898403559955, 0.04582538248613699\n            ])),\n    auxiliary_head=dict(\n        type='FCNHead',\n        in_channels=128,\n        in_index=3,\n        channels=64,\n        num_convs=1,\n        concat_input=False,\n        dropout_ratio=0.1,\n        num_classes=11,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss',\n            use_sigmoid=False,\n            loss_weight=0.4,\n            class_weight=[\n                0.12569045882504457, 0.06572725397779974, 0.1487976613352835,\n                0.07169089856307555, 0.02525688934502939, 0.057960431266748214,\n                0.12707596248744216, 0.07968132847344185, 0.10410474920439847,\n                0.14818898403559955, 0.04582538248613699\n            ])),\n    train_cfg=dict(),\n    test_cfg=dict(mode='slide', crop_size=(128, 128), stride=(85, 85)))\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(512, 512), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(128, 128), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(128, 128), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(512, 512),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=4,\n    train=dict(\n        classes=[\n            'Background', 'General trash', 'Paper', 'Paper pack', 'Metal',\n            'Glass', 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n            'Clothing'\n        ],\n        palette=[[0, 0, 0], [192, 0, 128], [0, 128, 192], [0, 128, 64],\n                 [128, 0, 0], [64, 0, 128], [64, 0, 192], [192, 128, 64],\n                 [192, 192, 128], [64, 64, 128], [128, 0, 192]],\n        type='CustomDataset',\n        reduce_zero_label=False,\n        img_dir='/opt/ml/segmentation/input/data/mmseg/images/training',\n        ann_dir='/opt/ml/segmentation/input/data/mmseg/annotations/training',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations'),\n            dict(type='Resize', img_scale=(512, 512), ratio_range=(0.5, 2.0)),\n            dict(type='RandomCrop', crop_size=(128, 128), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size=(128, 128), pad_val=0, seg_pad_val=255),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        classes=[\n            'Background', 'General trash', 'Paper', 'Paper pack', 'Metal',\n            'Glass', 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n            'Clothing'\n        ],\n        palette=[[0, 0, 0], [192, 0, 128], [0, 128, 192], [0, 128, 64],\n                 [128, 0, 0], [64, 0, 128], [64, 0, 192], [192, 128, 64],\n                 [192, 192, 128], [64, 64, 128], [128, 0, 192]],\n        type='CustomDataset',\n        reduce_zero_label=False,\n        img_dir='/opt/ml/segmentation/input/data/mmseg/images/validation',\n        ann_dir='/opt/ml/segmentation/input/data/mmseg/annotations/validation',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(512, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        classes=[\n            'Background', 'General trash', 'Paper', 'Paper pack', 'Metal',\n            'Glass', 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n            'Clothing'\n        ],\n        palette=[[0, 0, 0], [192, 0, 128], [0, 128, 192], [0, 128, 64],\n                 [128, 0, 0], [64, 0, 128], [64, 0, 192], [192, 128, 64],\n                 [192, 192, 128], [64, 64, 128], [128, 0, 192]],\n        type='CustomDataset',\n        reduce_zero_label=False,\n        img_dir='/opt/ml/segmentation/input/data/mmseg/images/test',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(512, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    by_epoch=False,\n    interval=100,\n    hooks=[\n        dict(type='TextLoggerHook'),\n        dict(\n            type='WandbLoggerHook',\n            init_kwargs=dict(\n                project='segmentation',\n                name='tmp-pspnet_unet',\n                entity='passion-ate'))\n    ])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'https://download.openmmlab.com/mmsegmentation/v0.5/unet/pspnet_unet_s5-d16_128x128_40k_stare/pspnet_unet_s5-d16_128x128_40k_stare_20201227_181818-3c2923c4.pth'\nresume_from = None\nworkflow = [('train', 1), ('val', 1)]\ncudnn_benchmark = True\noptimizer = dict(\n    type='AdamW',\n    lr=6e-05,\n    betas=(0.9, 0.999),\n    weight_decay=0.01,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict()\nlr_config = dict(\n    policy='poly',\n    warmup='linear',\n    warmup_iters=1500,\n    warmup_ratio=1e-06,\n    power=1.0,\n    min_lr=0.0,\n    by_epoch=False)\nrunner = dict(type='EpochBasedRunner', max_epochs=50)\ncheckpoint_config = dict(max_keep_ckpts=2, by_epoch=True, interval=1)\nevaluation = dict(\n    metric=['mDice', 'mIoU'], interval=1, by_epoch=True, pre_eval=True)\nwork_dir = './work_dir/'\ngpu_ids = range(0, 1)\nseed = None\n", "CLASSES": ["Background", "General trash", "Paper", "Paper pack", "Metal", "Glass", "Plastic", "Styrofoam", "Plastic bag", "Battery", "Clothing"], "PALETTE": [[0, 0, 0], [192, 0, 128], [0, 128, 192], [0, 128, 64], [128, 0, 0], [64, 0, 128], [64, 0, 192], [192, 128, 64], [192, 192, 128], [64, 64, 128], [128, 0, 192]]}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.0, "memory": 4897, "data_time": 0.02296, "decode.loss_ce": 0.28037, "decode.acc_seg": 6.23817, "aux.loss_ce": 0.11319, "aux.acc_seg": 4.63208, "loss": 0.39356, "time": 0.08974}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 1e-05, "memory": 4897, "data_time": 0.00069, "decode.loss_ce": 0.27435, "decode.acc_seg": 13.75906, "aux.loss_ce": 0.11018, "aux.acc_seg": 15.39268, "loss": 0.38454, "time": 0.05205}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 1e-05, "memory": 4897, "data_time": 0.00072, "decode.loss_ce": 0.28062, "decode.acc_seg": 41.39145, "aux.loss_ce": 0.11161, "aux.acc_seg": 40.52232, "loss": 0.39222, "time": 0.05219}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 2e-05, "memory": 4897, "data_time": 0.0007, "decode.loss_ce": 0.27471, "decode.acc_seg": 52.38362, "aux.loss_ce": 0.10853, "aux.acc_seg": 49.57899, "loss": 0.38324, "time": 0.05204}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 2e-05, "memory": 4897, "data_time": 0.00073, "decode.loss_ce": 0.26864, "decode.acc_seg": 52.4502, "aux.loss_ce": 0.10551, "aux.acc_seg": 51.16142, "loss": 0.37415, "time": 0.05187}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 2e-05, "memory": 4897, "data_time": 0.00074, "decode.loss_ce": 0.26947, "decode.acc_seg": 53.21912, "aux.loss_ce": 0.10512, "aux.acc_seg": 51.47612, "loss": 0.37459, "time": 0.05222}
{"mode": "val", "epoch": 1, "iter": 655, "lr": 3e-05, "aAcc": 0.7055, "mDice": 0.1599, "mAcc": 0.1801, "mIoU": 0.1204, "Dice.Background": 0.8459, "Dice.General trash": 0.0, "Dice.Paper": 0.4662, "Dice.Paper pack": 0.0, "Dice.Metal": 0.0, "Dice.Glass": 0.0, "Dice.Plastic": 0.0, "Dice.Styrofoam": 0.0, "Dice.Plastic bag": 0.447, "Dice.Battery": 0.0, "Dice.Clothing": 0.0, "Acc.Background": 0.8413, "Acc.General trash": 0.0, "Acc.Paper": 0.5923, "Acc.Paper pack": 0.0, "Acc.Metal": 0.0, "Acc.Glass": 0.0, "Acc.Plastic": 0.0, "Acc.Styrofoam": 0.0, "Acc.Plastic bag": 0.5478, "Acc.Battery": 0.0, "Acc.Clothing": 0.0, "IoU.Background": 0.733, "IoU.General trash": 0.0, "IoU.Paper": 0.3039, "IoU.Paper pack": 0.0, "IoU.Metal": 0.0, "IoU.Glass": 0.0, "IoU.Plastic": 0.0, "IoU.Styrofoam": 0.0, "IoU.Plastic bag": 0.2879, "IoU.Battery": 0.0, "IoU.Clothing": 0.0}
{"mode": "val", "epoch": 1, "iter": 163, "lr": 3e-05, "memory": 4897, "data_time": 0.01452, "decode.loss_ce": 0.26475, "decode.acc_seg": 55.49985, "aux.loss_ce": 0.1022, "aux.acc_seg": 53.54646, "loss": 0.36696, "time": 0.02941}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 3e-05, "memory": 4897, "data_time": 0.02279, "decode.loss_ce": 0.26534, "decode.acc_seg": 57.10406, "aux.loss_ce": 0.10213, "aux.acc_seg": 55.00046, "loss": 0.36748, "time": 0.07483}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 3e-05, "memory": 4897, "data_time": 0.00074, "decode.loss_ce": 0.25905, "decode.acc_seg": 54.65666, "aux.loss_ce": 0.09833, "aux.acc_seg": 54.76353, "loss": 0.35738, "time": 0.05197}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 4e-05, "memory": 4897, "data_time": 0.00077, "decode.loss_ce": 0.2553, "decode.acc_seg": 54.05624, "aux.loss_ce": 0.09588, "aux.acc_seg": 53.96468, "loss": 0.35118, "time": 0.05227}
{"mode": "train", "epoch": 2, "iter": 400, "lr": 4e-05, "memory": 4897, "data_time": 0.00075, "decode.loss_ce": 0.25071, "decode.acc_seg": 54.86969, "aux.loss_ce": 0.09277, "aux.acc_seg": 53.37872, "loss": 0.34348, "time": 0.05183}
{"mode": "train", "epoch": 2, "iter": 500, "lr": 4e-05, "memory": 4897, "data_time": 0.00072, "decode.loss_ce": 0.24716, "decode.acc_seg": 53.00313, "aux.loss_ce": 0.09004, "aux.acc_seg": 52.76237, "loss": 0.3372, "time": 0.0517}
{"mode": "train", "epoch": 2, "iter": 600, "lr": 5e-05, "memory": 4897, "data_time": 0.00071, "decode.loss_ce": 0.23759, "decode.acc_seg": 52.51776, "aux.loss_ce": 0.08497, "aux.acc_seg": 53.25661, "loss": 0.32256, "time": 0.05177}
{"mode": "val", "epoch": 2, "iter": 655, "lr": 5e-05, "aAcc": 0.7183, "mDice": 0.1193, "mAcc": 0.118, "mIoU": 0.0904, "Dice.Background": 0.8425, "Dice.General trash": 0.0, "Dice.Paper": 0.2249, "Dice.Paper pack": 0.0, "Dice.Metal": 0.0, "Dice.Glass": 0.0, "Dice.Plastic": 0.0, "Dice.Styrofoam": 0.0, "Dice.Plastic bag": 0.2452, "Dice.Battery": 0.0, "Dice.Clothing": 0.0, "Acc.Background": 0.9809, "Acc.General trash": 0.0, "Acc.Paper": 0.1548, "Acc.Paper pack": 0.0, "Acc.Metal": 0.0, "Acc.Glass": 0.0, "Acc.Plastic": 0.0, "Acc.Styrofoam": 0.0, "Acc.Plastic bag": 0.1619, "Acc.Battery": 0.0, "Acc.Clothing": 0.0, "IoU.Background": 0.7278, "IoU.General trash": 0.0, "IoU.Paper": 0.1267, "IoU.Paper pack": 0.0, "IoU.Metal": 0.0, "IoU.Glass": 0.0, "IoU.Plastic": 0.0, "IoU.Styrofoam": 0.0, "IoU.Plastic bag": 0.1398, "IoU.Battery": 0.0, "IoU.Clothing": 0.0}
{"mode": "val", "epoch": 2, "iter": 163, "lr": 5e-05, "memory": 4897, "data_time": 0.0144, "decode.loss_ce": 0.23454, "decode.acc_seg": 54.26683, "aux.loss_ce": 0.08203, "aux.acc_seg": 53.15828, "loss": 0.31657, "time": 0.02957}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 5e-05, "memory": 4897, "data_time": 0.02302, "decode.loss_ce": 0.23357, "decode.acc_seg": 50.98611, "aux.loss_ce": 0.08089, "aux.acc_seg": 56.15715, "loss": 0.31446, "time": 0.07445}
{"mode": "train", "epoch": 3, "iter": 200, "lr": 6e-05, "memory": 4897, "data_time": 0.00075, "decode.loss_ce": 0.21883, "decode.acc_seg": 50.76668, "aux.loss_ce": 0.07422, "aux.acc_seg": 54.65875, "loss": 0.29305, "time": 0.05193}
{"mode": "train", "epoch": 3, "iter": 300, "lr": 6e-05, "memory": 4897, "data_time": 0.00074, "decode.loss_ce": 0.21742, "decode.acc_seg": 50.88103, "aux.loss_ce": 0.07259, "aux.acc_seg": 55.32367, "loss": 0.29, "time": 0.05232}
{"mode": "train", "epoch": 3, "iter": 400, "lr": 6e-05, "memory": 4897, "data_time": 0.00074, "decode.loss_ce": 0.20987, "decode.acc_seg": 46.92891, "aux.loss_ce": 0.07062, "aux.acc_seg": 52.02209, "loss": 0.2805, "time": 0.05214}
{"mode": "train", "epoch": 3, "iter": 500, "lr": 6e-05, "memory": 4897, "data_time": 0.00073, "decode.loss_ce": 0.20308, "decode.acc_seg": 49.74765, "aux.loss_ce": 0.06781, "aux.acc_seg": 53.65404, "loss": 0.27089, "time": 0.05201}
{"mode": "train", "epoch": 3, "iter": 600, "lr": 6e-05, "memory": 4897, "data_time": 0.00072, "decode.loss_ce": 0.19711, "decode.acc_seg": 47.84157, "aux.loss_ce": 0.06506, "aux.acc_seg": 55.7148, "loss": 0.26218, "time": 0.05207}
{"mode": "val", "epoch": 3, "iter": 655, "lr": 6e-05, "aAcc": 0.6991, "mDice": 0.0755, "mAcc": 0.0912, "mIoU": 0.0639, "Dice.Background": 0.8232, "Dice.General trash": 0.0, "Dice.Paper": 0.0023, "Dice.Paper pack": 0.0, "Dice.Metal": 0.0, "Dice.Glass": 0.0, "Dice.Plastic": 0.0, "Dice.Styrofoam": 0.0, "Dice.Plastic bag": 0.0052, "Dice.Battery": 0.0, "Dice.Clothing": 0.0, "Acc.Background": 0.9998, "Acc.General trash": 0.0, "Acc.Paper": 0.0012, "Acc.Paper pack": 0.0, "Acc.Metal": 0.0, "Acc.Glass": 0.0, "Acc.Plastic": 0.0, "Acc.Styrofoam": 0.0, "Acc.Plastic bag": 0.0026, "Acc.Battery": 0.0, "Acc.Clothing": 0.0, "IoU.Background": 0.6995, "IoU.General trash": 0.0, "IoU.Paper": 0.0011, "IoU.Paper pack": 0.0, "IoU.Metal": 0.0, "IoU.Glass": 0.0, "IoU.Plastic": 0.0, "IoU.Styrofoam": 0.0, "IoU.Plastic bag": 0.0026, "IoU.Battery": 0.0, "IoU.Clothing": 0.0}
{"mode": "val", "epoch": 3, "iter": 163, "lr": 6e-05, "memory": 4897, "data_time": 0.0143, "decode.loss_ce": 0.19017, "decode.acc_seg": 47.89015, "aux.loss_ce": 0.06298, "aux.acc_seg": 55.96268, "loss": 0.25316, "time": 0.02893}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 6e-05, "memory": 4897, "data_time": 0.02372, "decode.loss_ce": 0.18882, "decode.acc_seg": 47.92288, "aux.loss_ce": 0.06267, "aux.acc_seg": 55.29337, "loss": 0.25149, "time": 0.07537}
{"mode": "train", "epoch": 4, "iter": 200, "lr": 6e-05, "memory": 4897, "data_time": 0.00073, "decode.loss_ce": 0.18845, "decode.acc_seg": 45.49971, "aux.loss_ce": 0.06336, "aux.acc_seg": 53.60156, "loss": 0.2518, "time": 0.0521}
{"mode": "train", "epoch": 4, "iter": 300, "lr": 6e-05, "memory": 4897, "data_time": 0.00068, "decode.loss_ce": 0.18206, "decode.acc_seg": 47.27298, "aux.loss_ce": 0.06164, "aux.acc_seg": 54.22379, "loss": 0.2437, "time": 0.05169}
{"mode": "train", "epoch": 4, "iter": 400, "lr": 6e-05, "memory": 4897, "data_time": 0.00072, "decode.loss_ce": 0.18061, "decode.acc_seg": 47.83012, "aux.loss_ce": 0.06177, "aux.acc_seg": 54.83063, "loss": 0.24239, "time": 0.05173}
{"mode": "train", "epoch": 4, "iter": 500, "lr": 6e-05, "memory": 4897, "data_time": 0.00076, "decode.loss_ce": 0.17336, "decode.acc_seg": 48.06456, "aux.loss_ce": 0.05769, "aux.acc_seg": 57.53879, "loss": 0.23105, "time": 0.05216}
{"mode": "train", "epoch": 4, "iter": 600, "lr": 6e-05, "memory": 4897, "data_time": 0.00075, "decode.loss_ce": 0.17231, "decode.acc_seg": 48.04372, "aux.loss_ce": 0.05794, "aux.acc_seg": 57.84982, "loss": 0.23025, "time": 0.05211}
{"mode": "val", "epoch": 4, "iter": 655, "lr": 6e-05, "aAcc": 0.6992, "mDice": 0.0759, "mAcc": 0.0914, "mIoU": 0.0642, "Dice.Background": 0.8237, "Dice.General trash": 0.0, "Dice.Paper": 0.0091, "Dice.Paper pack": 0.0, "Dice.Metal": 0.0, "Dice.Glass": 0.0, "Dice.Plastic": 0.0, "Dice.Styrofoam": 0.0, "Dice.Plastic bag": 0.0023, "Dice.Battery": 0.0, "Dice.Clothing": 0.0, "Acc.Background": 0.9997, "Acc.General trash": 0.0, "Acc.Paper": 0.0046, "Acc.Paper pack": 0.0, "Acc.Metal": 0.0, "Acc.Glass": 0.0, "Acc.Plastic": 0.0, "Acc.Styrofoam": 0.0, "Acc.Plastic bag": 0.0012, "Acc.Battery": 0.0, "Acc.Clothing": 0.0, "IoU.Background": 0.7002, "IoU.General trash": 0.0, "IoU.Paper": 0.0046, "IoU.Paper pack": 0.0, "IoU.Metal": 0.0, "IoU.Glass": 0.0, "IoU.Plastic": 0.0, "IoU.Styrofoam": 0.0, "IoU.Plastic bag": 0.0012, "IoU.Battery": 0.0, "IoU.Clothing": 0.0}
{"mode": "val", "epoch": 4, "iter": 163, "lr": 6e-05, "memory": 4897, "data_time": 0.01448, "decode.loss_ce": 0.16723, "decode.acc_seg": 48.0717, "aux.loss_ce": 0.05592, "aux.acc_seg": 58.678, "loss": 0.22315, "time": 0.02958}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 6e-05, "memory": 4897, "data_time": 0.02332, "decode.loss_ce": 0.1693, "decode.acc_seg": 48.03709, "aux.loss_ce": 0.05758, "aux.acc_seg": 57.62903, "loss": 0.22688, "time": 0.07457}
{"mode": "train", "epoch": 5, "iter": 200, "lr": 5e-05, "memory": 4897, "data_time": 0.00074, "decode.loss_ce": 0.16914, "decode.acc_seg": 46.65875, "aux.loss_ce": 0.05898, "aux.acc_seg": 55.67082, "loss": 0.22812, "time": 0.0519}
{"mode": "train", "epoch": 5, "iter": 300, "lr": 5e-05, "memory": 4897, "data_time": 0.00075, "decode.loss_ce": 0.16245, "decode.acc_seg": 48.66818, "aux.loss_ce": 0.05689, "aux.acc_seg": 56.56496, "loss": 0.21934, "time": 0.05172}
{"mode": "train", "epoch": 5, "iter": 400, "lr": 5e-05, "memory": 4897, "data_time": 0.0007, "decode.loss_ce": 0.16327, "decode.acc_seg": 47.32541, "aux.loss_ce": 0.05669, "aux.acc_seg": 58.14926, "loss": 0.21996, "time": 0.05149}
{"mode": "train", "epoch": 5, "iter": 500, "lr": 5e-05, "memory": 4897, "data_time": 0.00073, "decode.loss_ce": 0.15822, "decode.acc_seg": 48.27544, "aux.loss_ce": 0.05568, "aux.acc_seg": 57.16945, "loss": 0.2139, "time": 0.05165}
{"mode": "train", "epoch": 5, "iter": 600, "lr": 5e-05, "memory": 4897, "data_time": 0.0007, "decode.loss_ce": 0.16003, "decode.acc_seg": 47.24017, "aux.loss_ce": 0.05541, "aux.acc_seg": 57.21094, "loss": 0.21543, "time": 0.05144}
